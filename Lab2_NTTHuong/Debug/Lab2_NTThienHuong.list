
Lab2_NTThienHuong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f78  08002f78  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002f78  08002f78  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f78  08002f78  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000084  08003004  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003004  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000885d  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a57  00000000  00000000  0002894d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000817  00000000  00000000  0002ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f26  00000000  00000000  0002b657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af95  00000000  00000000  0004357d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b94  00000000  00000000  0004e512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031a0  00000000  00000000  000d60a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d9248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e20 	.word	0x08002e20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002e20 	.word	0x08002e20

0800014c <createNode>:
    struct Node *prev;
    struct Node *next;
} Node;


Node* createNode(int data) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    Node* newNode = (Node*)malloc(sizeof(Node));
 8000154:	200c      	movs	r0, #12
 8000156:	f002 f9a9 	bl	80024ac <malloc>
 800015a:	4603      	mov	r3, r0
 800015c:	60fb      	str	r3, [r7, #12]
    if (newNode == NULL) {
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d105      	bne.n	8000170 <createNode+0x24>
        printf("Memory allocation failed\n");
 8000164:	4809      	ldr	r0, [pc, #36]	; (800018c <createNode+0x40>)
 8000166:	f002 fb6b 	bl	8002840 <puts>
        exit(1);
 800016a:	2001      	movs	r0, #1
 800016c:	f002 f98c 	bl	8002488 <exit>
    }
    newNode->data = data;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	601a      	str	r2, [r3, #0]
    newNode->prev = NULL;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	2200      	movs	r2, #0
 800017a:	605a      	str	r2, [r3, #4]
    newNode->next = NULL;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	609a      	str	r2, [r3, #8]
    return newNode;
 8000182:	68fb      	ldr	r3, [r7, #12]
}
 8000184:	4618      	mov	r0, r3
 8000186:	3710      	adds	r7, #16
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	08002e38 	.word	0x08002e38

08000190 <insertAtEnd>:
        (*head)->prev = newNode;
    *head = newNode;
}


void insertAtEnd(Node** head, int data) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	6039      	str	r1, [r7, #0]
    Node* newNode = createNode(data);
 800019a:	6838      	ldr	r0, [r7, #0]
 800019c:	f7ff ffd6 	bl	800014c <createNode>
 80001a0:	60b8      	str	r0, [r7, #8]
    if (*head == NULL) {
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d103      	bne.n	80001b2 <insertAtEnd+0x22>
        *head = newNode;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	68ba      	ldr	r2, [r7, #8]
 80001ae:	601a      	str	r2, [r3, #0]
        return;
 80001b0:	e010      	b.n	80001d4 <insertAtEnd+0x44>
    }
    Node* temp = *head;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	60fb      	str	r3, [r7, #12]
    while (temp->next != NULL) {
 80001b8:	e002      	b.n	80001c0 <insertAtEnd+0x30>
        temp = temp->next;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	689b      	ldr	r3, [r3, #8]
 80001be:	60fb      	str	r3, [r7, #12]
    while (temp->next != NULL) {
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d1f8      	bne.n	80001ba <insertAtEnd+0x2a>
    }
    temp->next = newNode;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	68ba      	ldr	r2, [r7, #8]
 80001cc:	609a      	str	r2, [r3, #8]
    newNode->prev = temp;
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	68fa      	ldr	r2, [r7, #12]
 80001d2:	605a      	str	r2, [r3, #4]
}
 80001d4:	3710      	adds	r7, #16
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}

080001da <connectEndToFirst>:
void connectEndToFirst(Node** head) {
 80001da:	b480      	push	{r7}
 80001dc:	b085      	sub	sp, #20
 80001de:	af00      	add	r7, sp, #0
 80001e0:	6078      	str	r0, [r7, #4]
    Node* temp = *head;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	60fb      	str	r3, [r7, #12]
    while (temp->next != NULL) {
 80001e8:	e002      	b.n	80001f0 <connectEndToFirst+0x16>
        temp = temp->next;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	60fb      	str	r3, [r7, #12]
    while (temp->next != NULL) {
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d1f8      	bne.n	80001ea <connectEndToFirst+0x10>
    }
    temp->next = *head;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	609a      	str	r2, [r3, #8]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
	...

0800020c <update7SEG>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void update7SEG (int index){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	if (index >3) {
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b03      	cmp	r3, #3
 8000218:	dd04      	ble.n	8000224 <update7SEG+0x18>
		index_led = 0;
 800021a:	4b30      	ldr	r3, [pc, #192]	; (80002dc <update7SEG+0xd0>)
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
		index = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
	}

	switch (index){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b03      	cmp	r3, #3
 8000228:	d850      	bhi.n	80002cc <update7SEG+0xc0>
 800022a:	a201      	add	r2, pc, #4	; (adr r2, 8000230 <update7SEG+0x24>)
 800022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000230:	08000241 	.word	0x08000241
 8000234:	08000263 	.word	0x08000263
 8000238:	08000285 	.word	0x08000285
 800023c:	080002a9 	.word	0x080002a9
		case 0:
		  	HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	4826      	ldr	r0, [pc, #152]	; (80002e0 <update7SEG+0xd4>)
 8000246:	f001 f927 	bl	8001498 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOA, EN2_Pin| EN3_Pin  | EN1_Pin, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000250:	4823      	ldr	r0, [pc, #140]	; (80002e0 <update7SEG+0xd4>)
 8000252:	f001 f921 	bl	8001498 <HAL_GPIO_WritePin>
		  	display7SEG(led_buffer[0]);
 8000256:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <update7SEG+0xd8>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f8aa 	bl	80003b4 <display7SEG>
			break;
 8000260:	e038      	b.n	80002d4 <update7SEG+0xc8>
		case 1:
		  	HAL_GPIO_WritePin(GPIOA,  EN1_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	481e      	ldr	r0, [pc, #120]	; (80002e0 <update7SEG+0xd4>)
 8000268:	f001 f916 	bl	8001498 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000272:	481b      	ldr	r0, [pc, #108]	; (80002e0 <update7SEG+0xd4>)
 8000274:	f001 f910 	bl	8001498 <HAL_GPIO_WritePin>
		  	display7SEG(led_buffer[1]);
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <update7SEG+0xd8>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f899 	bl	80003b4 <display7SEG>
			break;
 8000282:	e027      	b.n	80002d4 <update7SEG+0xc8>
		case 2:
		  	HAL_GPIO_WritePin(GPIOA,EN2_Pin , GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <update7SEG+0xd4>)
 800028c:	f001 f904 	bl	8001498 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN3_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000296:	4812      	ldr	r0, [pc, #72]	; (80002e0 <update7SEG+0xd4>)
 8000298:	f001 f8fe 	bl	8001498 <HAL_GPIO_WritePin>
		  	display7SEG(led_buffer[2]);
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <update7SEG+0xd8>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f887 	bl	80003b4 <display7SEG>
			break;
 80002a6:	e015      	b.n	80002d4 <update7SEG+0xc8>
		case 3:
		  	HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <update7SEG+0xd4>)
 80002b0:	f001 f8f2 	bl	8001498 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOA, EN2_Pin | EN0_Pin | EN1_Pin, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <update7SEG+0xd4>)
 80002bc:	f001 f8ec 	bl	8001498 <HAL_GPIO_WritePin>
		  	display7SEG(led_buffer[3]);
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <update7SEG+0xd8>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f875 	bl	80003b4 <display7SEG>
			break;
 80002ca:	e003      	b.n	80002d4 <update7SEG+0xc8>
		default:
			display7SEG(0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f000 f871 	bl	80003b4 <display7SEG>
			break;
 80002d2:	bf00      	nop
	}
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000e8 	.word	0x200000e8
 80002e0:	40010800 	.word	0x40010800
 80002e4:	20000000 	.word	0x20000000

080002e8 <updateClockBuffer>:
void updateClockBuffer(){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	  second ++;
 80002ec:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <updateClockBuffer+0xb8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3301      	adds	r3, #1
 80002f2:	4a2b      	ldr	r2, [pc, #172]	; (80003a0 <updateClockBuffer+0xb8>)
 80002f4:	6013      	str	r3, [r2, #0]
	  	if ( second >= 60) {
 80002f6:	4b2a      	ldr	r3, [pc, #168]	; (80003a0 <updateClockBuffer+0xb8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b3b      	cmp	r3, #59	; 0x3b
 80002fc:	dd07      	ble.n	800030e <updateClockBuffer+0x26>
	  		second = 0;
 80002fe:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <updateClockBuffer+0xb8>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
	  		minute++;
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <updateClockBuffer+0xbc>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <updateClockBuffer+0xbc>)
 800030c:	6013      	str	r3, [r2, #0]
	  	}
	  	if (minute >= 60){
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <updateClockBuffer+0xbc>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b3b      	cmp	r3, #59	; 0x3b
 8000314:	dd07      	ble.n	8000326 <updateClockBuffer+0x3e>
	  		minute =0;
 8000316:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <updateClockBuffer+0xbc>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
	  		hour++;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <updateClockBuffer+0xc0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <updateClockBuffer+0xc0>)
 8000324:	6013      	str	r3, [r2, #0]
	  	}
	  	if (hour >= 24){
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <updateClockBuffer+0xc0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b17      	cmp	r3, #23
 800032c:	dd02      	ble.n	8000334 <updateClockBuffer+0x4c>
	  		hour=0;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <updateClockBuffer+0xc0>)
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
	  	}

	led_buffer[0] = hour / 10;
 8000334:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <updateClockBuffer+0xc0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <updateClockBuffer+0xc4>)
 800033a:	fb82 1203 	smull	r1, r2, r2, r3
 800033e:	1092      	asrs	r2, r2, #2
 8000340:	17db      	asrs	r3, r3, #31
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	4a1a      	ldr	r2, [pc, #104]	; (80003b0 <updateClockBuffer+0xc8>)
 8000346:	6013      	str	r3, [r2, #0]
	led_buffer[1] =	hour %10;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <updateClockBuffer+0xc0>)
 800034a:	6819      	ldr	r1, [r3, #0]
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <updateClockBuffer+0xc4>)
 800034e:	fb83 2301 	smull	r2, r3, r3, r1
 8000352:	109a      	asrs	r2, r3, #2
 8000354:	17cb      	asrs	r3, r1, #31
 8000356:	1ad2      	subs	r2, r2, r3
 8000358:	4613      	mov	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4413      	add	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	1aca      	subs	r2, r1, r3
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <updateClockBuffer+0xc8>)
 8000364:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute / 10;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <updateClockBuffer+0xbc>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a10      	ldr	r2, [pc, #64]	; (80003ac <updateClockBuffer+0xc4>)
 800036c:	fb82 1203 	smull	r1, r2, r2, r3
 8000370:	1092      	asrs	r2, r2, #2
 8000372:	17db      	asrs	r3, r3, #31
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <updateClockBuffer+0xc8>)
 8000378:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <updateClockBuffer+0xbc>)
 800037c:	6819      	ldr	r1, [r3, #0]
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <updateClockBuffer+0xc4>)
 8000380:	fb83 2301 	smull	r2, r3, r3, r1
 8000384:	109a      	asrs	r2, r3, #2
 8000386:	17cb      	asrs	r3, r1, #31
 8000388:	1ad2      	subs	r2, r2, r3
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	1aca      	subs	r2, r1, r3
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <updateClockBuffer+0xc8>)
 8000396:	60da      	str	r2, [r3, #12]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	20000018 	.word	0x20000018
 80003a4:	20000014 	.word	0x20000014
 80003a8:	20000010 	.word	0x20000010
 80003ac:	66666667 	.word	0x66666667
 80003b0:	20000000 	.word	0x20000000

080003b4 <display7SEG>:
void display7SEG(int k){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	switch (k){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2b09      	cmp	r3, #9
 80003c0:	d87f      	bhi.n	80004c2 <display7SEG+0x10e>
 80003c2:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <display7SEG+0x14>)
 80003c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c8:	080003f1 	.word	0x080003f1
 80003cc:	08000407 	.word	0x08000407
 80003d0:	0800041d 	.word	0x0800041d
 80003d4:	08000433 	.word	0x08000433
 80003d8:	08000449 	.word	0x08000449
 80003dc:	0800045f 	.word	0x0800045f
 80003e0:	08000475 	.word	0x08000475
 80003e4:	0800048b 	.word	0x0800048b
 80003e8:	080004a1 	.word	0x080004a1
 80003ec:	080004ad 	.word	0x080004ad
	case 0:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80003f0:	2200      	movs	r2, #0
 80003f2:	217f      	movs	r1, #127	; 0x7f
 80003f4:	4838      	ldr	r0, [pc, #224]	; (80004d8 <display7SEG+0x124>)
 80003f6:	f001 f84f 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	4836      	ldr	r0, [pc, #216]	; (80004d8 <display7SEG+0x124>)
 8000400:	f001 f84a 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 8000404:	e063      	b.n	80004ce <display7SEG+0x11a>
	case 1:
		  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_C_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2106      	movs	r1, #6
 800040a:	4833      	ldr	r0, [pc, #204]	; (80004d8 <display7SEG+0x124>)
 800040c:	f001 f844 	bl	8001498 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_D_Pin
 8000410:	2201      	movs	r2, #1
 8000412:	2179      	movs	r1, #121	; 0x79
 8000414:	4830      	ldr	r0, [pc, #192]	; (80004d8 <display7SEG+0x124>)
 8000416:	f001 f83f 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_SET);
		break;
 800041a:	e058      	b.n	80004ce <display7SEG+0x11a>
	case 2:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin | LED_D_Pin
 800041c:	2200      	movs	r2, #0
 800041e:	215b      	movs	r1, #91	; 0x5b
 8000420:	482d      	ldr	r0, [pc, #180]	; (80004d8 <display7SEG+0x124>)
 8000422:	f001 f839 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_G_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOB,LED_C_Pin|LED_F_Pin, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2124      	movs	r1, #36	; 0x24
 800042a:	482b      	ldr	r0, [pc, #172]	; (80004d8 <display7SEG+0x124>)
 800042c:	f001 f834 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 8000430:	e04d      	b.n	80004ce <display7SEG+0x11a>
	case 3:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000432:	2200      	movs	r2, #0
 8000434:	214f      	movs	r1, #79	; 0x4f
 8000436:	4828      	ldr	r0, [pc, #160]	; (80004d8 <display7SEG+0x124>)
 8000438:	f001 f82e 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_G_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB, LED_E_Pin|LED_F_Pin, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2130      	movs	r1, #48	; 0x30
 8000440:	4825      	ldr	r0, [pc, #148]	; (80004d8 <display7SEG+0x124>)
 8000442:	f001 f829 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 8000446:	e042      	b.n	80004ce <display7SEG+0x11a>
	case 4:
		  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_C_Pin |LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2166      	movs	r1, #102	; 0x66
 800044c:	4822      	ldr	r0, [pc, #136]	; (80004d8 <display7SEG+0x124>)
 800044e:	f001 f823 	bl	8001498 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_D_Pin|LED_E_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2119      	movs	r1, #25
 8000456:	4820      	ldr	r0, [pc, #128]	; (80004d8 <display7SEG+0x124>)
 8000458:	f001 f81e 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 800045c:	e037      	b.n	80004ce <display7SEG+0x11a>
	case 5:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_C_Pin|LED_D_Pin
 800045e:	2200      	movs	r2, #0
 8000460:	216d      	movs	r1, #109	; 0x6d
 8000462:	481d      	ldr	r0, [pc, #116]	; (80004d8 <display7SEG+0x124>)
 8000464:	f001 f818 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOB,LED_B_Pin|LED_E_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2112      	movs	r1, #18
 800046c:	481a      	ldr	r0, [pc, #104]	; (80004d8 <display7SEG+0x124>)
 800046e:	f001 f813 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 8000472:	e02c      	b.n	80004ce <display7SEG+0x11a>
	case 6:
		  HAL_GPIO_WritePin(GPIOB,LED_B_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2102      	movs	r1, #2
 8000478:	4817      	ldr	r0, [pc, #92]	; (80004d8 <display7SEG+0x124>)
 800047a:	f001 f80d 	bl	8001498 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_C_Pin|LED_D_Pin
 800047e:	2200      	movs	r2, #0
 8000480:	217d      	movs	r1, #125	; 0x7d
 8000482:	4815      	ldr	r0, [pc, #84]	; (80004d8 <display7SEG+0x124>)
 8000484:	f001 f808 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

		break;
 8000488:	e021      	b.n	80004ce <display7SEG+0x11a>
	case 7:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin , GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2107      	movs	r1, #7
 800048e:	4812      	ldr	r0, [pc, #72]	; (80004d8 <display7SEG+0x124>)
 8000490:	f001 f802 	bl	8001498 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, LED_D_Pin |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2178      	movs	r1, #120	; 0x78
 8000498:	480f      	ldr	r0, [pc, #60]	; (80004d8 <display7SEG+0x124>)
 800049a:	f000 fffd 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 800049e:	e016      	b.n	80004ce <display7SEG+0x11a>
	case 8:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80004a0:	2200      	movs	r2, #0
 80004a2:	217f      	movs	r1, #127	; 0x7f
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <display7SEG+0x124>)
 80004a6:	f000 fff7 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);
		break;
 80004aa:	e010      	b.n	80004ce <display7SEG+0x11a>
	case 9:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80004ac:	2200      	movs	r2, #0
 80004ae:	217f      	movs	r1, #127	; 0x7f
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <display7SEG+0x124>)
 80004b2:	f000 fff1 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);

		  HAL_GPIO_WritePin(GPIOB, LED_E_Pin, GPIO_PIN_SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	2110      	movs	r1, #16
 80004ba:	4807      	ldr	r0, [pc, #28]	; (80004d8 <display7SEG+0x124>)
 80004bc:	f000 ffec 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 80004c0:	e005      	b.n	80004ce <display7SEG+0x11a>
	default:
		  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80004c2:	2200      	movs	r2, #0
 80004c4:	217f      	movs	r1, #127	; 0x7f
 80004c6:	4804      	ldr	r0, [pc, #16]	; (80004d8 <display7SEG+0x124>)
 80004c8:	f000 ffe6 	bl	8001498 <HAL_GPIO_WritePin>
		                          |LED_E_Pin|LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);
	}
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010c00 	.word	0x40010c00

080004dc <controlColumns>:
void controlColumns (int value){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	switch (value){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b07      	cmp	r3, #7
 80004e8:	d878      	bhi.n	80005dc <controlColumns+0x100>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <controlColumns+0x14>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000511 	.word	0x08000511
 80004f4:	08000529 	.word	0x08000529
 80004f8:	08000541 	.word	0x08000541
 80004fc:	0800055b 	.word	0x0800055b
 8000500:	08000575 	.word	0x08000575
 8000504:	0800058f 	.word	0x0800058f
 8000508:	080005a9 	.word	0x080005a9
 800050c:	080005c3 	.word	0x080005c3
		case 0:
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2104      	movs	r1, #4
 8000514:	4837      	ldr	r0, [pc, #220]	; (80005f4 <controlColumns+0x118>)
 8000516:	f000 ffbf 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
 800051a:	2200      	movs	r2, #0
 800051c:	f64f 4108 	movw	r1, #64520	; 0xfc08
 8000520:	4834      	ldr	r0, [pc, #208]	; (80005f4 <controlColumns+0x118>)
 8000522:	f000 ffb9 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);
			break;
 8000526:	e060      	b.n	80005ea <controlColumns+0x10e>
		case 1:
			HAL_GPIO_WritePin(GPIOA, ENM1_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2108      	movs	r1, #8
 800052c:	4831      	ldr	r0, [pc, #196]	; (80005f4 <controlColumns+0x118>)
 800052e:	f000 ffb3 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
 8000532:	2200      	movs	r2, #0
 8000534:	f64f 4104 	movw	r1, #64516	; 0xfc04
 8000538:	482e      	ldr	r0, [pc, #184]	; (80005f4 <controlColumns+0x118>)
 800053a:	f000 ffad 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);
			break;
 800053e:	e054      	b.n	80005ea <controlColumns+0x10e>
		case 2:
			HAL_GPIO_WritePin(GPIOA, ENM2_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000546:	482b      	ldr	r0, [pc, #172]	; (80005f4 <controlColumns+0x118>)
 8000548:	f000 ffa6 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
 800054c:	2200      	movs	r2, #0
 800054e:	f64f 010c 	movw	r1, #63500	; 0xf80c
 8000552:	4828      	ldr	r0, [pc, #160]	; (80005f4 <controlColumns+0x118>)
 8000554:	f000 ffa0 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);
			break;
 8000558:	e047      	b.n	80005ea <controlColumns+0x10e>
		case 3:
			HAL_GPIO_WritePin(GPIOA, ENM3_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000560:	4824      	ldr	r0, [pc, #144]	; (80005f4 <controlColumns+0x118>)
 8000562:	f000 ff99 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM4_Pin|ENM5_Pin
 8000566:	2200      	movs	r2, #0
 8000568:	f24f 410c 	movw	r1, #62476	; 0xf40c
 800056c:	4821      	ldr	r0, [pc, #132]	; (80005f4 <controlColumns+0x118>)
 800056e:	f000 ff93 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);
			break;
 8000572:	e03a      	b.n	80005ea <controlColumns+0x10e>
		case 4:
			HAL_GPIO_WritePin(GPIOA, ENM4_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057a:	481e      	ldr	r0, [pc, #120]	; (80005f4 <controlColumns+0x118>)
 800057c:	f000 ff8c 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM5_Pin
 8000580:	2200      	movs	r2, #0
 8000582:	f64e 410c 	movw	r1, #60428	; 0xec0c
 8000586:	481b      	ldr	r0, [pc, #108]	; (80005f4 <controlColumns+0x118>)
 8000588:	f000 ff86 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);
			break;
 800058c:	e02d      	b.n	80005ea <controlColumns+0x10e>
		case 5:
			HAL_GPIO_WritePin(GPIOA, ENM5_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	4817      	ldr	r0, [pc, #92]	; (80005f4 <controlColumns+0x118>)
 8000596:	f000 ff7f 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin
 800059a:	2200      	movs	r2, #0
 800059c:	f64d 410c 	movw	r1, #56332	; 0xdc0c
 80005a0:	4814      	ldr	r0, [pc, #80]	; (80005f4 <controlColumns+0x118>)
 80005a2:	f000 ff79 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);
			break;
 80005a6:	e020      	b.n	80005ea <controlColumns+0x10e>
		case 6:
			HAL_GPIO_WritePin(GPIOA, ENM6_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <controlColumns+0x118>)
 80005b0:	f000 ff72 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
 80005b4:	2200      	movs	r2, #0
 80005b6:	f64b 410c 	movw	r1, #48140	; 0xbc0c
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <controlColumns+0x118>)
 80005bc:	f000 ff6c 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM7_Pin, GPIO_PIN_RESET);
			break;
 80005c0:	e013      	b.n	80005ea <controlColumns+0x10e>
		case 7:
			HAL_GPIO_WritePin(GPIOA, ENM7_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <controlColumns+0x118>)
 80005ca:	f000 ff65 	bl	8001498 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
 80005ce:	2200      	movs	r2, #0
 80005d0:	f647 410c 	movw	r1, #31756	; 0x7c0c
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <controlColumns+0x118>)
 80005d6:	f000 ff5f 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin, GPIO_PIN_RESET);
			break;
 80005da:	e006      	b.n	80005ea <controlColumns+0x10e>
		default:
			HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
 80005dc:	2200      	movs	r2, #0
 80005de:	f64f 410c 	movw	r1, #64524	; 0xfc0c
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <controlColumns+0x118>)
 80005e4:	f000 ff58 	bl	8001498 <HAL_GPIO_WritePin>
			  	                          |ENM6_Pin |ENM7_Pin, GPIO_PIN_RESET);
			break;
 80005e8:	bf00      	nop
	}
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40010800 	.word	0x40010800

080005f8 <controlRows>:
void controlRows (int value){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	switch (value){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b07      	cmp	r3, #7
 8000604:	d84a      	bhi.n	800069c <controlRows+0xa4>
 8000606:	a201      	add	r2, pc, #4	; (adr r2, 800060c <controlRows+0x14>)
 8000608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060c:	0800062d 	.word	0x0800062d
 8000610:	0800063b 	.word	0x0800063b
 8000614:	08000649 	.word	0x08000649
 8000618:	08000657 	.word	0x08000657
 800061c:	08000665 	.word	0x08000665
 8000620:	08000673 	.word	0x08000673
 8000624:	08000681 	.word	0x08000681
 8000628:	0800068f 	.word	0x0800068f
		case 0:
	  		  HAL_GPIO_WritePin(GPIOB, ROW0_Pin , SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000632:	4820      	ldr	r0, [pc, #128]	; (80006b4 <controlRows+0xbc>)
 8000634:	f000 ff30 	bl	8001498 <HAL_GPIO_WritePin>
			break;
 8000638:	e037      	b.n	80006aa <controlRows+0xb2>
		case 1:
	  		  HAL_GPIO_WritePin(GPIOB, ROW1_Pin , SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <controlRows+0xbc>)
 8000642:	f000 ff29 	bl	8001498 <HAL_GPIO_WritePin>

			break;
 8000646:	e030      	b.n	80006aa <controlRows+0xb2>
		case 2:
	  		  HAL_GPIO_WritePin(GPIOB, ROW2_Pin , SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064e:	4819      	ldr	r0, [pc, #100]	; (80006b4 <controlRows+0xbc>)
 8000650:	f000 ff22 	bl	8001498 <HAL_GPIO_WritePin>

			break;
 8000654:	e029      	b.n	80006aa <controlRows+0xb2>
		case 3:
	  		  HAL_GPIO_WritePin(GPIOB, ROW3_Pin , SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065c:	4815      	ldr	r0, [pc, #84]	; (80006b4 <controlRows+0xbc>)
 800065e:	f000 ff1b 	bl	8001498 <HAL_GPIO_WritePin>

			break;
 8000662:	e022      	b.n	80006aa <controlRows+0xb2>
		case 4:
	  		  HAL_GPIO_WritePin(GPIOB, ROW4_Pin , SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <controlRows+0xbc>)
 800066c:	f000 ff14 	bl	8001498 <HAL_GPIO_WritePin>

			break;
 8000670:	e01b      	b.n	80006aa <controlRows+0xb2>
		case 5:
	  		  HAL_GPIO_WritePin(GPIOB, ROW5_Pin , SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	480e      	ldr	r0, [pc, #56]	; (80006b4 <controlRows+0xbc>)
 800067a:	f000 ff0d 	bl	8001498 <HAL_GPIO_WritePin>

			break;
 800067e:	e014      	b.n	80006aa <controlRows+0xb2>
		case 6:
	  		  HAL_GPIO_WritePin(GPIOB, ROW6_Pin , SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <controlRows+0xbc>)
 8000688:	f000 ff06 	bl	8001498 <HAL_GPIO_WritePin>

			break;
 800068c:	e00d      	b.n	80006aa <controlRows+0xb2>
		case 7:
	  		  HAL_GPIO_WritePin(GPIOB, ROW7_Pin , SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <controlRows+0xbc>)
 8000696:	f000 feff 	bl	8001498 <HAL_GPIO_WritePin>
			break;
 800069a:	e006      	b.n	80006aa <controlRows+0xb2>
		default:
	  		  HAL_GPIO_WritePin(GPIOB, ROW0_Pin |ROW1_Pin | ROW2_Pin | ROW3_Pin | ROW4_Pin |
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <controlRows+0xbc>)
 80006a4:	f000 fef8 	bl	8001498 <HAL_GPIO_WritePin>
	  				  ROW5_Pin| ROW6_Pin |ROW7_Pin , RESET);
			break;
 80006a8:	bf00      	nop
	}
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40010c00 	.word	0x40010c00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0ce      	sub	sp, #312	; 0x138
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fbff 	bl	8000ec0 <HAL_Init>

  /* USER CODE BEGIN Init */

  int i=7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  int character_A[8][8] = {{0,0,0,1,1,0,0,0},{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
 80006c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80006d0:	4a72      	ldr	r2, [pc, #456]	; (800089c <main+0x1e4>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	4611      	mov	r1, r2
 80006d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006da:	461a      	mov	r2, r3
 80006dc:	f002 fa1b 	bl	8002b16 <memcpy>
    		  {0,1,1,1,1,1,1,0},{0,1,1,1,1,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0}};
//    int character_A[8][8] = {{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,1,1,1,1,0},{0,1,1,1,1,1,1,0},
//    		{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0},{0,0,0,1,1,0,0,0}};


  Node* head[8] = { NULL };
 80006e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80006e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80006e8:	4618      	mov	r0, r3
 80006ea:	2320      	movs	r3, #32
 80006ec:	461a      	mov	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f002 f986 	bl	8002a00 <memset>

  for (int i = 0; i < 8; i++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80006fa:	e02d      	b.n	8000758 <main+0xa0>
      for (int j = 0; j < 8; j++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000702:	e018      	b.n	8000736 <main+0x7e>
          insertAtEnd(&head[i], character_A[i][j]);
 8000704:	1d3a      	adds	r2, r7, #4
 8000706:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	18d0      	adds	r0, r2, r3
 800070e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000716:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800071a:	00d1      	lsls	r1, r2, #3
 800071c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000720:	440a      	add	r2, r1
 8000722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000726:	4619      	mov	r1, r3
 8000728:	f7ff fd32 	bl	8000190 <insertAtEnd>
      for (int j = 0; j < 8; j++) {
 800072c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000730:	3301      	adds	r3, #1
 8000732:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800073a:	2b07      	cmp	r3, #7
 800073c:	dde2      	ble.n	8000704 <main+0x4c>
      }
      connectEndToFirst(&head[i]);
 800073e:	1d3a      	adds	r2, r7, #4
 8000740:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fd46 	bl	80001da <connectEndToFirst>
  for (int i = 0; i < 8; i++) {
 800074e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000752:	3301      	adds	r3, #1
 8000754:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000758:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800075c:	2b07      	cmp	r3, #7
 800075e:	ddcd      	ble.n	80006fc <main+0x44>
  }

  Node* temp = head[i];
 8000760:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000764:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000768:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800076c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f8a2 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f928 	bl	80009cc <MX_GPIO_Init>
  MX_TIM2_Init();
 800077c:	f000 f8da 	bl	8000934 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000780:	4847      	ldr	r0, [pc, #284]	; (80008a0 <main+0x1e8>)
 8000782:	f001 fae9 	bl	8001d58 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(100);
 8000786:	2064      	movs	r0, #100	; 0x64
 8000788:	f000 f986 	bl	8000a98 <setTimer0>
  setTimer1(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f000 f996 	bl	8000ac0 <setTimer1>
  setTimer2(500);
 8000794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000798:	f000 f9a6 	bl	8000ae8 <setTimer2>
  setTimer3(10);
 800079c:	200a      	movs	r0, #10
 800079e:	f000 f9b7 	bl	8000b10 <setTimer3>
  // ngat timer goi 10ms moi lan => 10x100 = 1000ms = 1s
  while (1)
      {
  	  /* USER CODE END WHILE */
	  	  // update hour minute and second
		  if (timer0_flag == 1 ){
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <main+0x1ec>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d104      	bne.n	80007b4 <main+0xfc>
				updateClockBuffer();
 80007aa:	f7ff fd9d 	bl	80002e8 <updateClockBuffer>
				setTimer0(100);
 80007ae:	2064      	movs	r0, #100	; 0x64
 80007b0:	f000 f972 	bl	8000a98 <setTimer0>
		  }
		  // LED PA5 and DOT
    	  if (timer1_flag == 1){
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <main+0x1f0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10b      	bne.n	80007d4 <main+0x11c>

    		  HAL_GPIO_TogglePin(GPIOA,LED_RED_Pin);
 80007bc:	2120      	movs	r1, #32
 80007be:	483b      	ldr	r0, [pc, #236]	; (80008ac <main+0x1f4>)
 80007c0:	f000 fe82 	bl	80014c8 <HAL_GPIO_TogglePin>
    		  HAL_GPIO_TogglePin(GPIOA,DOT_Pin);
 80007c4:	2110      	movs	r1, #16
 80007c6:	4839      	ldr	r0, [pc, #228]	; (80008ac <main+0x1f4>)
 80007c8:	f000 fe7e 	bl	80014c8 <HAL_GPIO_TogglePin>
    		  setTimer1(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f000 f976 	bl	8000ac0 <setTimer1>
    	  }
    	  // update buffer to 7seg
    	  if (timer2_flag == 1){
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <main+0x1f8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10b      	bne.n	80007f4 <main+0x13c>
    		  update7SEG(index_led++);
 80007dc:	4b35      	ldr	r3, [pc, #212]	; (80008b4 <main+0x1fc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	4934      	ldr	r1, [pc, #208]	; (80008b4 <main+0x1fc>)
 80007e4:	600a      	str	r2, [r1, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fd10 	bl	800020c <update7SEG>
    		  setTimer2(500);
 80007ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f0:	f000 f97a 	bl	8000ae8 <setTimer2>
    	  }
    	  // led matrix
    	  if (timer3_flag == 1){
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <main+0x200>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d1d2      	bne.n	80007a2 <main+0xea>
    		  	 // turn of all led row
				controlRows(-1);
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f7ff fefa 	bl	80005f8 <controlRows>
				// turn on i column
    	 		controlColumns(i);
 8000804:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8000808:	f7ff fe68 	bl	80004dc <controlColumns>


    	 		 for (int j = 0; j < 8; j++) {
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000812:	e012      	b.n	800083a <main+0x182>
    	 	    	if (temp->data == 1){
 8000814:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d103      	bne.n	8000826 <main+0x16e>
    	 	    			controlRows(j);
 800081e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8000822:	f7ff fee9 	bl	80005f8 <controlRows>
    	 	    	}
    	 	    	temp = temp->next;
 8000826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    	 		 for (int j = 0; j < 8; j++) {
 8000830:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000834:	3301      	adds	r3, #1
 8000836:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800083a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800083e:	2b07      	cmp	r3, #7
 8000840:	dde8      	ble.n	8000814 <main+0x15c>
    	 		  }

    	 		 // update led matrix
    	 		 head[i] = head[i]->next;
 8000842:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000846:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800084a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800084e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000852:	6899      	ldr	r1, [r3, #8]
 8000854:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000858:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800085c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    	 	     i--;
 8000864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000868:	3b01      	subs	r3, #1
 800086a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	 	     if (i == -1) {
 800086e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000876:	d102      	bne.n	800087e <main+0x1c6>
    	 	    	 i = 7;
 8000878:	2307      	movs	r3, #7
 800087a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	 	     }
    	 	     temp = head[i];
 800087e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000882:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000886:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800088a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    	  	setTimer3(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f000 f93c 	bl	8000b10 <setTimer3>
		  if (timer0_flag == 1 ){
 8000898:	e783      	b.n	80007a2 <main+0xea>
 800089a:	bf00      	nop
 800089c:	08002e54 	.word	0x08002e54
 80008a0:	200000a0 	.word	0x200000a0
 80008a4:	200000fc 	.word	0x200000fc
 80008a8:	20000100 	.word	0x20000100
 80008ac:	40010800 	.word	0x40010800
 80008b0:	20000104 	.word	0x20000104
 80008b4:	200000e8 	.word	0x200000e8
 80008b8:	20000108 	.word	0x20000108

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	; 0x40
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 f898 	bl	8002a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	2310      	movs	r3, #16
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fe02 	bl	80014fc <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008fe:	f000 f8c5 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f870 	bl	8001a00 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000926:	f000 f8b1 	bl	8000a8c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	; 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000956:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_TIM2_Init+0x94>)
 800095a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800095e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000968:	2209      	movs	r2, #9
 800096a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_TIM2_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <MX_TIM2_Init+0x94>)
 800097a:	f001 f99d 	bl	8001cb8 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000984:	f000 f882 	bl	8000a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_TIM2_Init+0x94>)
 8000996:	f001 fb33 	bl	8002000 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a0:	f000 f874 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_TIM2_Init+0x94>)
 80009b2:	f001 fcff 	bl	80023b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f866 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200000a0 	.word	0x200000a0

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_GPIO_Init+0xa0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MX_GPIO_Init+0xa0>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_GPIO_Init+0xa0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_GPIO_Init+0xa0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_GPIO_Init+0xa0>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_GPIO_Init+0xa0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0308 	and.w	r3, r3, #8
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000a10:	2200      	movs	r2, #0
 8000a12:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000a16:	4816      	ldr	r0, [pc, #88]	; (8000a70 <MX_GPIO_Init+0xa4>)
 8000a18:	f000 fd3e 	bl	8001498 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_B_Pin|LED_C_Pin|ROW2_Pin
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_GPIO_Init+0xa8>)
 8000a24:	f000 fd38 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000a28:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000a2c:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2302      	movs	r3, #2
 8000a38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <MX_GPIO_Init+0xa4>)
 8000a42:	f000 fbad 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin LED_C_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin LED_D_Pin LED_E_Pin LED_F_Pin
                           LED_G_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|ROW2_Pin
 8000a46:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000a4a:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|LED_D_Pin|LED_E_Pin|LED_F_Pin
                          |LED_G_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0xa8>)
 8000a60:	f000 fb9e 	bl	80011a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000a80:	f000 f85a 	bl	8000b38 <timerRun>

}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <setTimer0>:
int timer2_flag = 0;
int timer3_flag = 0;

int TIMER_CYCLE = 10;

void setTimer0 (int duration){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8000aa0:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <setTimer0+0x20>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <setTimer0+0x24>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000ec 	.word	0x200000ec
 8000abc:	200000fc 	.word	0x200000fc

08000ac0 <setTimer1>:

void setTimer1 (int duration){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	timer1_count = duration;
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <setTimer1+0x20>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <setTimer1+0x24>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200000f0 	.word	0x200000f0
 8000ae4:	20000100 	.word	0x20000100

08000ae8 <setTimer2>:
void setTimer2 (int duration){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	timer2_count = duration;
 8000af0:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <setTimer2+0x20>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <setTimer2+0x24>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200000f4 	.word	0x200000f4
 8000b0c:	20000104 	.word	0x20000104

08000b10 <setTimer3>:
void setTimer3 (int duration){
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	timer3_count = duration;
 8000b18:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <setTimer3+0x20>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <setTimer3+0x24>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000f8 	.word	0x200000f8
 8000b34:	20000108 	.word	0x20000108

08000b38 <timerRun>:
void timerRun(){
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0){
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <timerRun+0x8c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dd0b      	ble.n	8000b5c <timerRun+0x24>
		timer0_counter--;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <timerRun+0x8c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <timerRun+0x8c>)
 8000b4c:	6013      	str	r3, [r2, #0]
		if (timer0_counter <= 0){
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <timerRun+0x8c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	dc02      	bgt.n	8000b5c <timerRun+0x24>
			timer0_flag = 1;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <timerRun+0x90>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer1_count > 0){
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <timerRun+0x94>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dd0b      	ble.n	8000b7c <timerRun+0x44>
		timer1_count--;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <timerRun+0x94>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <timerRun+0x94>)
 8000b6c:	6013      	str	r3, [r2, #0]
		if (timer1_count <= 0 ){
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <timerRun+0x94>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	dc02      	bgt.n	8000b7c <timerRun+0x44>
			timer1_flag = 1;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <timerRun+0x98>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_count > 0){
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <timerRun+0x9c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	dd0b      	ble.n	8000b9c <timerRun+0x64>
		timer2_count--;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <timerRun+0x9c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <timerRun+0x9c>)
 8000b8c:	6013      	str	r3, [r2, #0]
		if (timer2_count <= 0){
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <timerRun+0x9c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	dc02      	bgt.n	8000b9c <timerRun+0x64>
			timer2_flag = 1;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <timerRun+0xa0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_count > 0){
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <timerRun+0xa4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dd0b      	ble.n	8000bbc <timerRun+0x84>
		timer3_count--;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <timerRun+0xa4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <timerRun+0xa4>)
 8000bac:	6013      	str	r3, [r2, #0]
		if (timer3_count <= 0){
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <timerRun+0xa4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dc02      	bgt.n	8000bbc <timerRun+0x84>
			timer3_flag = 1;
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <timerRun+0xa8>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	200000ec 	.word	0x200000ec
 8000bc8:	200000fc 	.word	0x200000fc
 8000bcc:	200000f0 	.word	0x200000f0
 8000bd0:	20000100 	.word	0x20000100
 8000bd4:	200000f4 	.word	0x200000f4
 8000bd8:	20000104 	.word	0x20000104
 8000bdc:	200000f8 	.word	0x200000f8
 8000be0:	20000108 	.word	0x20000108

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x60>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_MspInit+0x60>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d113      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x44>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	201c      	movs	r0, #28
 8000c78:	f000 fa5b 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c7c:	201c      	movs	r0, #28
 8000c7e:	f000 fa74 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f939 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM2_IRQHandler+0x10>)
 8000ce6:	f001 f883 	bl	8001df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000a0 	.word	0x200000a0

08000cf4 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cfe:	f001 fedd 	bl	8002abc <__errno>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2216      	movs	r2, #22
 8000d06:	601a      	str	r2, [r3, #0]
  return -1;
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_exit>:

void _exit (int status)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ffe7 	bl	8000cf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d26:	e7fe      	b.n	8000d26 <_exit+0x12>

08000d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
  }

  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e009      	b.n	8000d88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf1      	blt.n	8000d74 <_write+0x12>
  }
  return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_close>:

int _close(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc0:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
	...

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f001 fe46 	bl	8002abc <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20002800 	.word	0x20002800
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	2000010c 	.word	0x2000010c
 8000e64:	20000260 	.word	0x20000260

08000e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff fff8 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7a:	490c      	ldr	r1, [pc, #48]	; (8000eac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e90:	4c09      	ldr	r4, [pc, #36]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f001 fe13 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea2:	f7ff fc09 	bl	80006b8 <main>
  bx lr
 8000ea6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000eb0:	08002f80 	.word	0x08002f80
  ldr r2, =_sbss
 8000eb4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000eb8:	20000260 	.word	0x20000260

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x28>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x28>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f923 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe82 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f93b 	bl	8001186 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f903 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000001c 	.word	0x2000001c
 8000f44:	20000024 	.word	0x20000024
 8000f48:	20000020 	.word	0x20000020

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_IncTick+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <HAL_IncTick+0x20>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000024 	.word	0x20000024
 8000f6c:	20000110 	.word	0x20000110

08000f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <HAL_GetTick+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000110 	.word	0x20000110

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4906      	ldr	r1, [pc, #24]	; (800101c <__NVIC_EnableIRQ+0x34>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff90 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff2d 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff42 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff90 	bl	8001074 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5f 	bl	8001020 <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff35 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffa2 	bl	80010d8 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	e161      	b.n	8001478 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011b4:	2201      	movs	r2, #1
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8150 	bne.w	8001472 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a97      	ldr	r2, [pc, #604]	; (8001434 <HAL_GPIO_Init+0x294>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d05e      	beq.n	800129a <HAL_GPIO_Init+0xfa>
 80011dc:	4a95      	ldr	r2, [pc, #596]	; (8001434 <HAL_GPIO_Init+0x294>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d875      	bhi.n	80012ce <HAL_GPIO_Init+0x12e>
 80011e2:	4a95      	ldr	r2, [pc, #596]	; (8001438 <HAL_GPIO_Init+0x298>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d058      	beq.n	800129a <HAL_GPIO_Init+0xfa>
 80011e8:	4a93      	ldr	r2, [pc, #588]	; (8001438 <HAL_GPIO_Init+0x298>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d86f      	bhi.n	80012ce <HAL_GPIO_Init+0x12e>
 80011ee:	4a93      	ldr	r2, [pc, #588]	; (800143c <HAL_GPIO_Init+0x29c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d052      	beq.n	800129a <HAL_GPIO_Init+0xfa>
 80011f4:	4a91      	ldr	r2, [pc, #580]	; (800143c <HAL_GPIO_Init+0x29c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d869      	bhi.n	80012ce <HAL_GPIO_Init+0x12e>
 80011fa:	4a91      	ldr	r2, [pc, #580]	; (8001440 <HAL_GPIO_Init+0x2a0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d04c      	beq.n	800129a <HAL_GPIO_Init+0xfa>
 8001200:	4a8f      	ldr	r2, [pc, #572]	; (8001440 <HAL_GPIO_Init+0x2a0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d863      	bhi.n	80012ce <HAL_GPIO_Init+0x12e>
 8001206:	4a8f      	ldr	r2, [pc, #572]	; (8001444 <HAL_GPIO_Init+0x2a4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d046      	beq.n	800129a <HAL_GPIO_Init+0xfa>
 800120c:	4a8d      	ldr	r2, [pc, #564]	; (8001444 <HAL_GPIO_Init+0x2a4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d85d      	bhi.n	80012ce <HAL_GPIO_Init+0x12e>
 8001212:	2b12      	cmp	r3, #18
 8001214:	d82a      	bhi.n	800126c <HAL_GPIO_Init+0xcc>
 8001216:	2b12      	cmp	r3, #18
 8001218:	d859      	bhi.n	80012ce <HAL_GPIO_Init+0x12e>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <HAL_GPIO_Init+0x80>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	0800129b 	.word	0x0800129b
 8001224:	08001275 	.word	0x08001275
 8001228:	08001287 	.word	0x08001287
 800122c:	080012c9 	.word	0x080012c9
 8001230:	080012cf 	.word	0x080012cf
 8001234:	080012cf 	.word	0x080012cf
 8001238:	080012cf 	.word	0x080012cf
 800123c:	080012cf 	.word	0x080012cf
 8001240:	080012cf 	.word	0x080012cf
 8001244:	080012cf 	.word	0x080012cf
 8001248:	080012cf 	.word	0x080012cf
 800124c:	080012cf 	.word	0x080012cf
 8001250:	080012cf 	.word	0x080012cf
 8001254:	080012cf 	.word	0x080012cf
 8001258:	080012cf 	.word	0x080012cf
 800125c:	080012cf 	.word	0x080012cf
 8001260:	080012cf 	.word	0x080012cf
 8001264:	0800127d 	.word	0x0800127d
 8001268:	08001291 	.word	0x08001291
 800126c:	4a76      	ldr	r2, [pc, #472]	; (8001448 <HAL_GPIO_Init+0x2a8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001272:	e02c      	b.n	80012ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e029      	b.n	80012d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	3304      	adds	r3, #4
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e024      	b.n	80012d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	3308      	adds	r3, #8
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e01f      	b.n	80012d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	330c      	adds	r3, #12
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e01a      	b.n	80012d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012a2:	2304      	movs	r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e013      	b.n	80012d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d105      	bne.n	80012bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b0:	2308      	movs	r3, #8
 80012b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	611a      	str	r2, [r3, #16]
          break;
 80012ba:	e009      	b.n	80012d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012bc:	2308      	movs	r3, #8
 80012be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	615a      	str	r2, [r3, #20]
          break;
 80012c6:	e003      	b.n	80012d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x130>
          break;
 80012ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	d801      	bhi.n	80012da <HAL_GPIO_Init+0x13a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	e001      	b.n	80012de <HAL_GPIO_Init+0x13e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3304      	adds	r3, #4
 80012de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d802      	bhi.n	80012ec <HAL_GPIO_Init+0x14c>
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0x152>
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	3b08      	subs	r3, #8
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	210f      	movs	r1, #15
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	6a39      	ldr	r1, [r7, #32]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	431a      	orrs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80a9 	beq.w	8001472 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_GPIO_Init+0x2ac>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_Init+0x2ac>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_GPIO_Init+0x2ac>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001338:	4a45      	ldr	r2, [pc, #276]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3d      	ldr	r2, [pc, #244]	; (8001454 <HAL_GPIO_Init+0x2b4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00d      	beq.n	8001380 <HAL_GPIO_Init+0x1e0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3c      	ldr	r2, [pc, #240]	; (8001458 <HAL_GPIO_Init+0x2b8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <HAL_GPIO_Init+0x1dc>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3b      	ldr	r2, [pc, #236]	; (800145c <HAL_GPIO_Init+0x2bc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_GPIO_Init+0x1d8>
 8001374:	2302      	movs	r3, #2
 8001376:	e004      	b.n	8001382 <HAL_GPIO_Init+0x1e2>
 8001378:	2303      	movs	r3, #3
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x1e2>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_GPIO_Init+0x1e2>
 8001380:	2300      	movs	r3, #0
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	f002 0203 	and.w	r2, r2, #3
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	4093      	lsls	r3, r2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001392:	492f      	ldr	r1, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ac:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	492b      	ldr	r1, [pc, #172]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	608b      	str	r3, [r1, #8]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4927      	ldr	r1, [pc, #156]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	4921      	ldr	r1, [pc, #132]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	60cb      	str	r3, [r1, #12]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	491d      	ldr	r1, [pc, #116]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4917      	ldr	r1, [pc, #92]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4913      	ldr	r1, [pc, #76]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 8001414:	4013      	ands	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d01f      	beq.n	8001464 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	490d      	ldr	r1, [pc, #52]	; (8001460 <HAL_GPIO_Init+0x2c0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e01f      	b.n	8001472 <HAL_GPIO_Init+0x2d2>
 8001432:	bf00      	nop
 8001434:	10320000 	.word	0x10320000
 8001438:	10310000 	.word	0x10310000
 800143c:	10220000 	.word	0x10220000
 8001440:	10210000 	.word	0x10210000
 8001444:	10120000 	.word	0x10120000
 8001448:	10110000 	.word	0x10110000
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40011000 	.word	0x40011000
 8001460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_GPIO_Init+0x2f4>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	43db      	mvns	r3, r3
 800146c:	4909      	ldr	r1, [pc, #36]	; (8001494 <HAL_GPIO_Init+0x2f4>)
 800146e:	4013      	ands	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f ae96 	bne.w	80011b4 <HAL_GPIO_Init+0x14>
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	372c      	adds	r7, #44	; 0x2c
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4013      	ands	r3, r2
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43d9      	mvns	r1, r3
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	400b      	ands	r3, r1
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e272      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001528:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d112      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
 8001534:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001540:	d10b      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d06c      	beq.n	8001628 <HAL_RCC_OscConfig+0x12c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d168      	bne.n	8001628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e24c      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x76>
 8001564:	4b80      	ldr	r3, [pc, #512]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a7f      	ldr	r2, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e02e      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x98>
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7a      	ldr	r2, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0xbc>
 800159e:	4b72      	ldr	r3, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a71      	ldr	r2, [pc, #452]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 80015b8:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a67      	ldr	r2, [pc, #412]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fcca 	bl	8000f70 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fcc6 	bl	8000f70 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e200      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe4>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fcb6 	bl	8000f70 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fcb2 	bl	8000f70 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1ec      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x10c>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1c0      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4939      	ldr	r1, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fc6b 	bl	8000f70 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fc67 	bl	8000f70 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e1a1      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4927      	ldr	r1, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc4a 	bl	8000f70 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff fc46 	bl	8000f70 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e180      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d03a      	beq.n	8001780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d019      	beq.n	8001746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fc2a 	bl	8000f70 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff fc26 	bl	8000f70 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e160      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fa9c 	bl	8001c7c <RCC_Delay>
 8001744:	e01c      	b.n	8001780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fc10 	bl	8000f70 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001752:	e00f      	b.n	8001774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff fc0c 	bl	8000f70 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d908      	bls.n	8001774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e146      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	42420000 	.word	0x42420000
 8001770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	4b92      	ldr	r3, [pc, #584]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e9      	bne.n	8001754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a6 	beq.w	80018da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a87      	ldr	r2, [pc, #540]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b85      	ldr	r3, [pc, #532]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b82      	ldr	r3, [pc, #520]	; (80019c4 <HAL_RCC_OscConfig+0x4c8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c6:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <HAL_RCC_OscConfig+0x4c8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7e      	ldr	r2, [pc, #504]	; (80019c4 <HAL_RCC_OscConfig+0x4c8>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fbcd 	bl	8000f70 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fbc9 	bl	8000f70 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e103      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	4b75      	ldr	r3, [pc, #468]	; (80019c4 <HAL_RCC_OscConfig+0x4c8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x312>
 8001800:	4b6f      	ldr	r3, [pc, #444]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	e02d      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x334>
 8001816:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a69      	ldr	r2, [pc, #420]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a66      	ldr	r2, [pc, #408]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	e01c      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0x356>
 8001838:	4b61      	ldr	r3, [pc, #388]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a60      	ldr	r2, [pc, #384]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a5d      	ldr	r2, [pc, #372]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e00b      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001852:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a57      	ldr	r2, [pc, #348]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d015      	beq.n	800189e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fb7d 	bl	8000f70 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fb79 	bl	8000f70 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0b1      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ee      	beq.n	800187a <HAL_RCC_OscConfig+0x37e>
 800189c:	e014      	b.n	80018c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff fb67 	bl	8000f70 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fb63 	bl	8000f70 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e09b      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ee      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8087 	beq.w	80019f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d061      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d146      	bne.n	8001986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x4cc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb37 	bl	8000f70 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff fb33 	bl	8000f70 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e06d      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d108      	bne.n	8001940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4921      	ldr	r1, [pc, #132]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a19      	ldr	r1, [r3, #32]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	430b      	orrs	r3, r1
 8001952:	491b      	ldr	r1, [pc, #108]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x4cc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff fb07 	bl	8000f70 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff fb03 	bl	8000f70 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e03d      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x46a>
 8001984:	e035      	b.n	80019f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x4cc>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff faf0 	bl	8000f70 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff faec 	bl	8000f70 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e026      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x498>
 80019b2:	e01e      	b.n	80019f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e019      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40007000 	.word	0x40007000
 80019c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_OscConfig+0x500>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0d0      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4965      	ldr	r1, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e073      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06b      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af0:	f7ff fa3e 	bl	8000f70 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff fa3a 	bl	8000f70 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e053      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 020c 	and.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d210      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1cc>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f99c 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08002f54 	.word	0x08002f54
 8001bcc:	2000001c 	.word	0x2000001c
 8001bd0:	20000020 	.word	0x20000020

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x30>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x36>
 8001c02:	e027      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	e027      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	0c9b      	lsrs	r3, r3, #18
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	0c5b      	lsrs	r3, r3, #17
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c36:	fb03 f202 	mul.w	r2, r3, r2
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e004      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c48:	fb02 f303 	mul.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	613b      	str	r3, [r7, #16]
      break;
 8001c52:	e002      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c56:	613b      	str	r3, [r7, #16]
      break;
 8001c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5a:	693b      	ldr	r3, [r7, #16]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	007a1200 	.word	0x007a1200
 8001c70:	08002f64 	.word	0x08002f64
 8001c74:	08002f74 	.word	0x08002f74
 8001c78:	003d0900 	.word	0x003d0900

08001c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <RCC_Delay+0x34>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <RCC_Delay+0x38>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0a5b      	lsrs	r3, r3, #9
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c98:	bf00      	nop
  }
  while (Delay --);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	60fa      	str	r2, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f9      	bne.n	8001c98 <RCC_Delay+0x1c>
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	2000001c 	.word	0x2000001c
 8001cb4:	10624dd3 	.word	0x10624dd3

08001cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e041      	b.n	8001d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe ffb2 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f000 fa6e 	bl	80021d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d001      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e035      	b.n	8001ddc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_TIM_Base_Start_IT+0x90>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x4e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9a:	d004      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x4e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_TIM_Base_Start_IT+0x94>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d111      	bne.n	8001dca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d010      	beq.n	8001dda <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc8:	e007      	b.n	8001dda <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400

08001df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0202 	mvn.w	r2, #2
 8001e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f9b4 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f9a7 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f9b6 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0204 	mvn.w	r2, #4
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f98a 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f97d 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f98c 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0208 	mvn.w	r2, #8
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f960 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f953 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f962 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0210 	mvn.w	r2, #16
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f936 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f929 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f938 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0201 	mvn.w	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fd82 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fa6b 	bl	8002476 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b40      	cmp	r3, #64	; 0x40
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8fc 	bl	80021c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0220 	mvn.w	r2, #32
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa36 	bl	8002464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_TIM_ConfigClockSource+0x1c>
 8002018:	2302      	movs	r3, #2
 800201a:	e0b4      	b.n	8002186 <HAL_TIM_ConfigClockSource+0x186>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800203a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002054:	d03e      	beq.n	80020d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800205a:	f200 8087 	bhi.w	800216c <HAL_TIM_ConfigClockSource+0x16c>
 800205e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002062:	f000 8086 	beq.w	8002172 <HAL_TIM_ConfigClockSource+0x172>
 8002066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206a:	d87f      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b70      	cmp	r3, #112	; 0x70
 800206e:	d01a      	beq.n	80020a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002070:	2b70      	cmp	r3, #112	; 0x70
 8002072:	d87b      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b60      	cmp	r3, #96	; 0x60
 8002076:	d050      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x11a>
 8002078:	2b60      	cmp	r3, #96	; 0x60
 800207a:	d877      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	2b50      	cmp	r3, #80	; 0x50
 800207e:	d03c      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0xfa>
 8002080:	2b50      	cmp	r3, #80	; 0x50
 8002082:	d873      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d058      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x13a>
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d86f      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
 800208c:	2b30      	cmp	r3, #48	; 0x30
 800208e:	d064      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x15a>
 8002090:	2b30      	cmp	r3, #48	; 0x30
 8002092:	d86b      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
 8002094:	2b20      	cmp	r3, #32
 8002096:	d060      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x15a>
 8002098:	2b20      	cmp	r3, #32
 800209a:	d867      	bhi.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d05c      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x15a>
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d05a      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x15a>
 80020a4:	e062      	b.n	800216c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020b6:	f000 f95e 	bl	8002376 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	609a      	str	r2, [r3, #8]
      break;
 80020d2:	e04f      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020e4:	f000 f947 	bl	8002376 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020f6:	609a      	str	r2, [r3, #8]
      break;
 80020f8:	e03c      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002106:	461a      	mov	r2, r3
 8002108:	f000 f8be 	bl	8002288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2150      	movs	r1, #80	; 0x50
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f915 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 8002118:	e02c      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002126:	461a      	mov	r2, r3
 8002128:	f000 f8dc 	bl	80022e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2160      	movs	r1, #96	; 0x60
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f905 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 8002138:	e01c      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002146:	461a      	mov	r2, r3
 8002148:	f000 f89e 	bl	8002288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2140      	movs	r1, #64	; 0x40
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8f5 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 8002158:	e00c      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f000 f8ec 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 800216a:	e003      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e000      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a25      	ldr	r2, [pc, #148]	; (8002280 <TIM_Base_SetConfig+0xa8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <TIM_Base_SetConfig+0x28>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0x28>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a22      	ldr	r2, [pc, #136]	; (8002284 <TIM_Base_SetConfig+0xac>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d108      	bne.n	8002212 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1a      	ldr	r2, [pc, #104]	; (8002280 <TIM_Base_SetConfig+0xa8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0x52>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0x52>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a17      	ldr	r2, [pc, #92]	; (8002284 <TIM_Base_SetConfig+0xac>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <TIM_Base_SetConfig+0xa8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d103      	bne.n	8002270 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	615a      	str	r2, [r3, #20]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40000400 	.word	0x40000400

08002288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 0201 	bic.w	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f023 030a 	bic.w	r3, r3, #10
 80022c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f023 0210 	bic.w	r2, r3, #16
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800230e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	031b      	lsls	r3, r3, #12
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002320:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	621a      	str	r2, [r3, #32]
}
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	f043 0307 	orr.w	r3, r3, #7
 8002364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002376:	b480      	push	{r7}
 8002378:	b087      	sub	sp, #28
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002390:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	431a      	orrs	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4313      	orrs	r3, r2
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	609a      	str	r2, [r3, #8]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e041      	b.n	8002450 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d004      	beq.n	8002424 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d10c      	bne.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800242a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4313      	orrs	r3, r2
 8002434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40012c00 	.word	0x40012c00
 8002460:	40000400 	.word	0x40000400

08002464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <exit>:
 8002488:	b508      	push	{r3, lr}
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <exit+0x1c>)
 800248c:	4604      	mov	r4, r0
 800248e:	b113      	cbz	r3, 8002496 <exit+0xe>
 8002490:	2100      	movs	r1, #0
 8002492:	f3af 8000 	nop.w
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <exit+0x20>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b103      	cbz	r3, 800249e <exit+0x16>
 800249c:	4798      	blx	r3
 800249e:	4620      	mov	r0, r4
 80024a0:	f7fe fc38 	bl	8000d14 <_exit>
 80024a4:	00000000 	.word	0x00000000
 80024a8:	20000254 	.word	0x20000254

080024ac <malloc>:
 80024ac:	4b02      	ldr	r3, [pc, #8]	; (80024b8 <malloc+0xc>)
 80024ae:	4601      	mov	r1, r0
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	f000 b823 	b.w	80024fc <_malloc_r>
 80024b6:	bf00      	nop
 80024b8:	20000080 	.word	0x20000080

080024bc <sbrk_aligned>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4e0e      	ldr	r6, [pc, #56]	; (80024f8 <sbrk_aligned+0x3c>)
 80024c0:	460c      	mov	r4, r1
 80024c2:	6831      	ldr	r1, [r6, #0]
 80024c4:	4605      	mov	r5, r0
 80024c6:	b911      	cbnz	r1, 80024ce <sbrk_aligned+0x12>
 80024c8:	f000 fad6 	bl	8002a78 <_sbrk_r>
 80024cc:	6030      	str	r0, [r6, #0]
 80024ce:	4621      	mov	r1, r4
 80024d0:	4628      	mov	r0, r5
 80024d2:	f000 fad1 	bl	8002a78 <_sbrk_r>
 80024d6:	1c43      	adds	r3, r0, #1
 80024d8:	d00a      	beq.n	80024f0 <sbrk_aligned+0x34>
 80024da:	1cc4      	adds	r4, r0, #3
 80024dc:	f024 0403 	bic.w	r4, r4, #3
 80024e0:	42a0      	cmp	r0, r4
 80024e2:	d007      	beq.n	80024f4 <sbrk_aligned+0x38>
 80024e4:	1a21      	subs	r1, r4, r0
 80024e6:	4628      	mov	r0, r5
 80024e8:	f000 fac6 	bl	8002a78 <_sbrk_r>
 80024ec:	3001      	adds	r0, #1
 80024ee:	d101      	bne.n	80024f4 <sbrk_aligned+0x38>
 80024f0:	f04f 34ff 	mov.w	r4, #4294967295
 80024f4:	4620      	mov	r0, r4
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	20000118 	.word	0x20000118

080024fc <_malloc_r>:
 80024fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002500:	1ccd      	adds	r5, r1, #3
 8002502:	f025 0503 	bic.w	r5, r5, #3
 8002506:	3508      	adds	r5, #8
 8002508:	2d0c      	cmp	r5, #12
 800250a:	bf38      	it	cc
 800250c:	250c      	movcc	r5, #12
 800250e:	2d00      	cmp	r5, #0
 8002510:	4607      	mov	r7, r0
 8002512:	db01      	blt.n	8002518 <_malloc_r+0x1c>
 8002514:	42a9      	cmp	r1, r5
 8002516:	d905      	bls.n	8002524 <_malloc_r+0x28>
 8002518:	230c      	movs	r3, #12
 800251a:	2600      	movs	r6, #0
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4630      	mov	r0, r6
 8002520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002524:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80025f8 <_malloc_r+0xfc>
 8002528:	f000 f868 	bl	80025fc <__malloc_lock>
 800252c:	f8d8 3000 	ldr.w	r3, [r8]
 8002530:	461c      	mov	r4, r3
 8002532:	bb5c      	cbnz	r4, 800258c <_malloc_r+0x90>
 8002534:	4629      	mov	r1, r5
 8002536:	4638      	mov	r0, r7
 8002538:	f7ff ffc0 	bl	80024bc <sbrk_aligned>
 800253c:	1c43      	adds	r3, r0, #1
 800253e:	4604      	mov	r4, r0
 8002540:	d155      	bne.n	80025ee <_malloc_r+0xf2>
 8002542:	f8d8 4000 	ldr.w	r4, [r8]
 8002546:	4626      	mov	r6, r4
 8002548:	2e00      	cmp	r6, #0
 800254a:	d145      	bne.n	80025d8 <_malloc_r+0xdc>
 800254c:	2c00      	cmp	r4, #0
 800254e:	d048      	beq.n	80025e2 <_malloc_r+0xe6>
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	4631      	mov	r1, r6
 8002554:	4638      	mov	r0, r7
 8002556:	eb04 0903 	add.w	r9, r4, r3
 800255a:	f000 fa8d 	bl	8002a78 <_sbrk_r>
 800255e:	4581      	cmp	r9, r0
 8002560:	d13f      	bne.n	80025e2 <_malloc_r+0xe6>
 8002562:	6821      	ldr	r1, [r4, #0]
 8002564:	4638      	mov	r0, r7
 8002566:	1a6d      	subs	r5, r5, r1
 8002568:	4629      	mov	r1, r5
 800256a:	f7ff ffa7 	bl	80024bc <sbrk_aligned>
 800256e:	3001      	adds	r0, #1
 8002570:	d037      	beq.n	80025e2 <_malloc_r+0xe6>
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	442b      	add	r3, r5
 8002576:	6023      	str	r3, [r4, #0]
 8002578:	f8d8 3000 	ldr.w	r3, [r8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d038      	beq.n	80025f2 <_malloc_r+0xf6>
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	42a2      	cmp	r2, r4
 8002584:	d12b      	bne.n	80025de <_malloc_r+0xe2>
 8002586:	2200      	movs	r2, #0
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	e00f      	b.n	80025ac <_malloc_r+0xb0>
 800258c:	6822      	ldr	r2, [r4, #0]
 800258e:	1b52      	subs	r2, r2, r5
 8002590:	d41f      	bmi.n	80025d2 <_malloc_r+0xd6>
 8002592:	2a0b      	cmp	r2, #11
 8002594:	d917      	bls.n	80025c6 <_malloc_r+0xca>
 8002596:	1961      	adds	r1, r4, r5
 8002598:	42a3      	cmp	r3, r4
 800259a:	6025      	str	r5, [r4, #0]
 800259c:	bf18      	it	ne
 800259e:	6059      	strne	r1, [r3, #4]
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	bf08      	it	eq
 80025a4:	f8c8 1000 	streq.w	r1, [r8]
 80025a8:	5162      	str	r2, [r4, r5]
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	4638      	mov	r0, r7
 80025ae:	f104 060b 	add.w	r6, r4, #11
 80025b2:	f000 f829 	bl	8002608 <__malloc_unlock>
 80025b6:	f026 0607 	bic.w	r6, r6, #7
 80025ba:	1d23      	adds	r3, r4, #4
 80025bc:	1af2      	subs	r2, r6, r3
 80025be:	d0ae      	beq.n	800251e <_malloc_r+0x22>
 80025c0:	1b9b      	subs	r3, r3, r6
 80025c2:	50a3      	str	r3, [r4, r2]
 80025c4:	e7ab      	b.n	800251e <_malloc_r+0x22>
 80025c6:	42a3      	cmp	r3, r4
 80025c8:	6862      	ldr	r2, [r4, #4]
 80025ca:	d1dd      	bne.n	8002588 <_malloc_r+0x8c>
 80025cc:	f8c8 2000 	str.w	r2, [r8]
 80025d0:	e7ec      	b.n	80025ac <_malloc_r+0xb0>
 80025d2:	4623      	mov	r3, r4
 80025d4:	6864      	ldr	r4, [r4, #4]
 80025d6:	e7ac      	b.n	8002532 <_malloc_r+0x36>
 80025d8:	4634      	mov	r4, r6
 80025da:	6876      	ldr	r6, [r6, #4]
 80025dc:	e7b4      	b.n	8002548 <_malloc_r+0x4c>
 80025de:	4613      	mov	r3, r2
 80025e0:	e7cc      	b.n	800257c <_malloc_r+0x80>
 80025e2:	230c      	movs	r3, #12
 80025e4:	4638      	mov	r0, r7
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	f000 f80e 	bl	8002608 <__malloc_unlock>
 80025ec:	e797      	b.n	800251e <_malloc_r+0x22>
 80025ee:	6025      	str	r5, [r4, #0]
 80025f0:	e7dc      	b.n	80025ac <_malloc_r+0xb0>
 80025f2:	605b      	str	r3, [r3, #4]
 80025f4:	deff      	udf	#255	; 0xff
 80025f6:	bf00      	nop
 80025f8:	20000114 	.word	0x20000114

080025fc <__malloc_lock>:
 80025fc:	4801      	ldr	r0, [pc, #4]	; (8002604 <__malloc_lock+0x8>)
 80025fe:	f000 ba88 	b.w	8002b12 <__retarget_lock_acquire_recursive>
 8002602:	bf00      	nop
 8002604:	2000025c 	.word	0x2000025c

08002608 <__malloc_unlock>:
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <__malloc_unlock+0x8>)
 800260a:	f000 ba83 	b.w	8002b14 <__retarget_lock_release_recursive>
 800260e:	bf00      	nop
 8002610:	2000025c 	.word	0x2000025c

08002614 <std>:
 8002614:	2300      	movs	r3, #0
 8002616:	b510      	push	{r4, lr}
 8002618:	4604      	mov	r4, r0
 800261a:	e9c0 3300 	strd	r3, r3, [r0]
 800261e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002622:	6083      	str	r3, [r0, #8]
 8002624:	8181      	strh	r1, [r0, #12]
 8002626:	6643      	str	r3, [r0, #100]	; 0x64
 8002628:	81c2      	strh	r2, [r0, #14]
 800262a:	6183      	str	r3, [r0, #24]
 800262c:	4619      	mov	r1, r3
 800262e:	2208      	movs	r2, #8
 8002630:	305c      	adds	r0, #92	; 0x5c
 8002632:	f000 f9e5 	bl	8002a00 <memset>
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <std+0x58>)
 8002638:	6224      	str	r4, [r4, #32]
 800263a:	6263      	str	r3, [r4, #36]	; 0x24
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <std+0x5c>)
 800263e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <std+0x60>)
 8002642:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <std+0x64>)
 8002646:	6323      	str	r3, [r4, #48]	; 0x30
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <std+0x68>)
 800264a:	429c      	cmp	r4, r3
 800264c:	d006      	beq.n	800265c <std+0x48>
 800264e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002652:	4294      	cmp	r4, r2
 8002654:	d002      	beq.n	800265c <std+0x48>
 8002656:	33d0      	adds	r3, #208	; 0xd0
 8002658:	429c      	cmp	r4, r3
 800265a:	d105      	bne.n	8002668 <std+0x54>
 800265c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002664:	f000 ba54 	b.w	8002b10 <__retarget_lock_init_recursive>
 8002668:	bd10      	pop	{r4, pc}
 800266a:	bf00      	nop
 800266c:	08002851 	.word	0x08002851
 8002670:	08002873 	.word	0x08002873
 8002674:	080028ab 	.word	0x080028ab
 8002678:	080028cf 	.word	0x080028cf
 800267c:	2000011c 	.word	0x2000011c

08002680 <stdio_exit_handler>:
 8002680:	4a02      	ldr	r2, [pc, #8]	; (800268c <stdio_exit_handler+0xc>)
 8002682:	4903      	ldr	r1, [pc, #12]	; (8002690 <stdio_exit_handler+0x10>)
 8002684:	4803      	ldr	r0, [pc, #12]	; (8002694 <stdio_exit_handler+0x14>)
 8002686:	f000 b869 	b.w	800275c <_fwalk_sglue>
 800268a:	bf00      	nop
 800268c:	20000028 	.word	0x20000028
 8002690:	08002cc9 	.word	0x08002cc9
 8002694:	20000034 	.word	0x20000034

08002698 <cleanup_stdio>:
 8002698:	6841      	ldr	r1, [r0, #4]
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <cleanup_stdio+0x34>)
 800269c:	b510      	push	{r4, lr}
 800269e:	4299      	cmp	r1, r3
 80026a0:	4604      	mov	r4, r0
 80026a2:	d001      	beq.n	80026a8 <cleanup_stdio+0x10>
 80026a4:	f000 fb10 	bl	8002cc8 <_fflush_r>
 80026a8:	68a1      	ldr	r1, [r4, #8]
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <cleanup_stdio+0x38>)
 80026ac:	4299      	cmp	r1, r3
 80026ae:	d002      	beq.n	80026b6 <cleanup_stdio+0x1e>
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fb09 	bl	8002cc8 <_fflush_r>
 80026b6:	68e1      	ldr	r1, [r4, #12]
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <cleanup_stdio+0x3c>)
 80026ba:	4299      	cmp	r1, r3
 80026bc:	d004      	beq.n	80026c8 <cleanup_stdio+0x30>
 80026be:	4620      	mov	r0, r4
 80026c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c4:	f000 bb00 	b.w	8002cc8 <_fflush_r>
 80026c8:	bd10      	pop	{r4, pc}
 80026ca:	bf00      	nop
 80026cc:	2000011c 	.word	0x2000011c
 80026d0:	20000184 	.word	0x20000184
 80026d4:	200001ec 	.word	0x200001ec

080026d8 <global_stdio_init.part.0>:
 80026d8:	b510      	push	{r4, lr}
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <global_stdio_init.part.0+0x30>)
 80026dc:	4c0b      	ldr	r4, [pc, #44]	; (800270c <global_stdio_init.part.0+0x34>)
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <global_stdio_init.part.0+0x38>)
 80026e0:	4620      	mov	r0, r4
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	2104      	movs	r1, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	f7ff ff94 	bl	8002614 <std>
 80026ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80026f0:	2201      	movs	r2, #1
 80026f2:	2109      	movs	r1, #9
 80026f4:	f7ff ff8e 	bl	8002614 <std>
 80026f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80026fc:	2202      	movs	r2, #2
 80026fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002702:	2112      	movs	r1, #18
 8002704:	f7ff bf86 	b.w	8002614 <std>
 8002708:	20000254 	.word	0x20000254
 800270c:	2000011c 	.word	0x2000011c
 8002710:	08002681 	.word	0x08002681

08002714 <__sfp_lock_acquire>:
 8002714:	4801      	ldr	r0, [pc, #4]	; (800271c <__sfp_lock_acquire+0x8>)
 8002716:	f000 b9fc 	b.w	8002b12 <__retarget_lock_acquire_recursive>
 800271a:	bf00      	nop
 800271c:	2000025d 	.word	0x2000025d

08002720 <__sfp_lock_release>:
 8002720:	4801      	ldr	r0, [pc, #4]	; (8002728 <__sfp_lock_release+0x8>)
 8002722:	f000 b9f7 	b.w	8002b14 <__retarget_lock_release_recursive>
 8002726:	bf00      	nop
 8002728:	2000025d 	.word	0x2000025d

0800272c <__sinit>:
 800272c:	b510      	push	{r4, lr}
 800272e:	4604      	mov	r4, r0
 8002730:	f7ff fff0 	bl	8002714 <__sfp_lock_acquire>
 8002734:	6a23      	ldr	r3, [r4, #32]
 8002736:	b11b      	cbz	r3, 8002740 <__sinit+0x14>
 8002738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800273c:	f7ff bff0 	b.w	8002720 <__sfp_lock_release>
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <__sinit+0x28>)
 8002742:	6223      	str	r3, [r4, #32]
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__sinit+0x2c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f5      	bne.n	8002738 <__sinit+0xc>
 800274c:	f7ff ffc4 	bl	80026d8 <global_stdio_init.part.0>
 8002750:	e7f2      	b.n	8002738 <__sinit+0xc>
 8002752:	bf00      	nop
 8002754:	08002699 	.word	0x08002699
 8002758:	20000254 	.word	0x20000254

0800275c <_fwalk_sglue>:
 800275c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002760:	4607      	mov	r7, r0
 8002762:	4688      	mov	r8, r1
 8002764:	4614      	mov	r4, r2
 8002766:	2600      	movs	r6, #0
 8002768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800276c:	f1b9 0901 	subs.w	r9, r9, #1
 8002770:	d505      	bpl.n	800277e <_fwalk_sglue+0x22>
 8002772:	6824      	ldr	r4, [r4, #0]
 8002774:	2c00      	cmp	r4, #0
 8002776:	d1f7      	bne.n	8002768 <_fwalk_sglue+0xc>
 8002778:	4630      	mov	r0, r6
 800277a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800277e:	89ab      	ldrh	r3, [r5, #12]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d907      	bls.n	8002794 <_fwalk_sglue+0x38>
 8002784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002788:	3301      	adds	r3, #1
 800278a:	d003      	beq.n	8002794 <_fwalk_sglue+0x38>
 800278c:	4629      	mov	r1, r5
 800278e:	4638      	mov	r0, r7
 8002790:	47c0      	blx	r8
 8002792:	4306      	orrs	r6, r0
 8002794:	3568      	adds	r5, #104	; 0x68
 8002796:	e7e9      	b.n	800276c <_fwalk_sglue+0x10>

08002798 <_puts_r>:
 8002798:	6a03      	ldr	r3, [r0, #32]
 800279a:	b570      	push	{r4, r5, r6, lr}
 800279c:	4605      	mov	r5, r0
 800279e:	460e      	mov	r6, r1
 80027a0:	6884      	ldr	r4, [r0, #8]
 80027a2:	b90b      	cbnz	r3, 80027a8 <_puts_r+0x10>
 80027a4:	f7ff ffc2 	bl	800272c <__sinit>
 80027a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027aa:	07db      	lsls	r3, r3, #31
 80027ac:	d405      	bmi.n	80027ba <_puts_r+0x22>
 80027ae:	89a3      	ldrh	r3, [r4, #12]
 80027b0:	0598      	lsls	r0, r3, #22
 80027b2:	d402      	bmi.n	80027ba <_puts_r+0x22>
 80027b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027b6:	f000 f9ac 	bl	8002b12 <__retarget_lock_acquire_recursive>
 80027ba:	89a3      	ldrh	r3, [r4, #12]
 80027bc:	0719      	lsls	r1, r3, #28
 80027be:	d513      	bpl.n	80027e8 <_puts_r+0x50>
 80027c0:	6923      	ldr	r3, [r4, #16]
 80027c2:	b18b      	cbz	r3, 80027e8 <_puts_r+0x50>
 80027c4:	3e01      	subs	r6, #1
 80027c6:	68a3      	ldr	r3, [r4, #8]
 80027c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60a3      	str	r3, [r4, #8]
 80027d0:	b9e9      	cbnz	r1, 800280e <_puts_r+0x76>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da2e      	bge.n	8002834 <_puts_r+0x9c>
 80027d6:	4622      	mov	r2, r4
 80027d8:	210a      	movs	r1, #10
 80027da:	4628      	mov	r0, r5
 80027dc:	f000 f87b 	bl	80028d6 <__swbuf_r>
 80027e0:	3001      	adds	r0, #1
 80027e2:	d007      	beq.n	80027f4 <_puts_r+0x5c>
 80027e4:	250a      	movs	r5, #10
 80027e6:	e007      	b.n	80027f8 <_puts_r+0x60>
 80027e8:	4621      	mov	r1, r4
 80027ea:	4628      	mov	r0, r5
 80027ec:	f000 f8b0 	bl	8002950 <__swsetup_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d0e7      	beq.n	80027c4 <_puts_r+0x2c>
 80027f4:	f04f 35ff 	mov.w	r5, #4294967295
 80027f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027fa:	07da      	lsls	r2, r3, #31
 80027fc:	d405      	bmi.n	800280a <_puts_r+0x72>
 80027fe:	89a3      	ldrh	r3, [r4, #12]
 8002800:	059b      	lsls	r3, r3, #22
 8002802:	d402      	bmi.n	800280a <_puts_r+0x72>
 8002804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002806:	f000 f985 	bl	8002b14 <__retarget_lock_release_recursive>
 800280a:	4628      	mov	r0, r5
 800280c:	bd70      	pop	{r4, r5, r6, pc}
 800280e:	2b00      	cmp	r3, #0
 8002810:	da04      	bge.n	800281c <_puts_r+0x84>
 8002812:	69a2      	ldr	r2, [r4, #24]
 8002814:	429a      	cmp	r2, r3
 8002816:	dc06      	bgt.n	8002826 <_puts_r+0x8e>
 8002818:	290a      	cmp	r1, #10
 800281a:	d004      	beq.n	8002826 <_puts_r+0x8e>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	6022      	str	r2, [r4, #0]
 8002822:	7019      	strb	r1, [r3, #0]
 8002824:	e7cf      	b.n	80027c6 <_puts_r+0x2e>
 8002826:	4622      	mov	r2, r4
 8002828:	4628      	mov	r0, r5
 800282a:	f000 f854 	bl	80028d6 <__swbuf_r>
 800282e:	3001      	adds	r0, #1
 8002830:	d1c9      	bne.n	80027c6 <_puts_r+0x2e>
 8002832:	e7df      	b.n	80027f4 <_puts_r+0x5c>
 8002834:	250a      	movs	r5, #10
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	6022      	str	r2, [r4, #0]
 800283c:	701d      	strb	r5, [r3, #0]
 800283e:	e7db      	b.n	80027f8 <_puts_r+0x60>

08002840 <puts>:
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <puts+0xc>)
 8002842:	4601      	mov	r1, r0
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	f7ff bfa7 	b.w	8002798 <_puts_r>
 800284a:	bf00      	nop
 800284c:	20000080 	.word	0x20000080

08002850 <__sread>:
 8002850:	b510      	push	{r4, lr}
 8002852:	460c      	mov	r4, r1
 8002854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002858:	f000 f8fc 	bl	8002a54 <_read_r>
 800285c:	2800      	cmp	r0, #0
 800285e:	bfab      	itete	ge
 8002860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002862:	89a3      	ldrhlt	r3, [r4, #12]
 8002864:	181b      	addge	r3, r3, r0
 8002866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800286a:	bfac      	ite	ge
 800286c:	6563      	strge	r3, [r4, #84]	; 0x54
 800286e:	81a3      	strhlt	r3, [r4, #12]
 8002870:	bd10      	pop	{r4, pc}

08002872 <__swrite>:
 8002872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002876:	461f      	mov	r7, r3
 8002878:	898b      	ldrh	r3, [r1, #12]
 800287a:	4605      	mov	r5, r0
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	460c      	mov	r4, r1
 8002880:	4616      	mov	r6, r2
 8002882:	d505      	bpl.n	8002890 <__swrite+0x1e>
 8002884:	2302      	movs	r3, #2
 8002886:	2200      	movs	r2, #0
 8002888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800288c:	f000 f8d0 	bl	8002a30 <_lseek_r>
 8002890:	89a3      	ldrh	r3, [r4, #12]
 8002892:	4632      	mov	r2, r6
 8002894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002898:	81a3      	strh	r3, [r4, #12]
 800289a:	4628      	mov	r0, r5
 800289c:	463b      	mov	r3, r7
 800289e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028a6:	f000 b8f7 	b.w	8002a98 <_write_r>

080028aa <__sseek>:
 80028aa:	b510      	push	{r4, lr}
 80028ac:	460c      	mov	r4, r1
 80028ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028b2:	f000 f8bd 	bl	8002a30 <_lseek_r>
 80028b6:	1c43      	adds	r3, r0, #1
 80028b8:	89a3      	ldrh	r3, [r4, #12]
 80028ba:	bf15      	itete	ne
 80028bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80028be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028c6:	81a3      	strheq	r3, [r4, #12]
 80028c8:	bf18      	it	ne
 80028ca:	81a3      	strhne	r3, [r4, #12]
 80028cc:	bd10      	pop	{r4, pc}

080028ce <__sclose>:
 80028ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d2:	f000 b89d 	b.w	8002a10 <_close_r>

080028d6 <__swbuf_r>:
 80028d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d8:	460e      	mov	r6, r1
 80028da:	4614      	mov	r4, r2
 80028dc:	4605      	mov	r5, r0
 80028de:	b118      	cbz	r0, 80028e8 <__swbuf_r+0x12>
 80028e0:	6a03      	ldr	r3, [r0, #32]
 80028e2:	b90b      	cbnz	r3, 80028e8 <__swbuf_r+0x12>
 80028e4:	f7ff ff22 	bl	800272c <__sinit>
 80028e8:	69a3      	ldr	r3, [r4, #24]
 80028ea:	60a3      	str	r3, [r4, #8]
 80028ec:	89a3      	ldrh	r3, [r4, #12]
 80028ee:	071a      	lsls	r2, r3, #28
 80028f0:	d525      	bpl.n	800293e <__swbuf_r+0x68>
 80028f2:	6923      	ldr	r3, [r4, #16]
 80028f4:	b31b      	cbz	r3, 800293e <__swbuf_r+0x68>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	6922      	ldr	r2, [r4, #16]
 80028fa:	b2f6      	uxtb	r6, r6
 80028fc:	1a98      	subs	r0, r3, r2
 80028fe:	6963      	ldr	r3, [r4, #20]
 8002900:	4637      	mov	r7, r6
 8002902:	4283      	cmp	r3, r0
 8002904:	dc04      	bgt.n	8002910 <__swbuf_r+0x3a>
 8002906:	4621      	mov	r1, r4
 8002908:	4628      	mov	r0, r5
 800290a:	f000 f9dd 	bl	8002cc8 <_fflush_r>
 800290e:	b9e0      	cbnz	r0, 800294a <__swbuf_r+0x74>
 8002910:	68a3      	ldr	r3, [r4, #8]
 8002912:	3b01      	subs	r3, #1
 8002914:	60a3      	str	r3, [r4, #8]
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	6022      	str	r2, [r4, #0]
 800291c:	701e      	strb	r6, [r3, #0]
 800291e:	6962      	ldr	r2, [r4, #20]
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	429a      	cmp	r2, r3
 8002924:	d004      	beq.n	8002930 <__swbuf_r+0x5a>
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	07db      	lsls	r3, r3, #31
 800292a:	d506      	bpl.n	800293a <__swbuf_r+0x64>
 800292c:	2e0a      	cmp	r6, #10
 800292e:	d104      	bne.n	800293a <__swbuf_r+0x64>
 8002930:	4621      	mov	r1, r4
 8002932:	4628      	mov	r0, r5
 8002934:	f000 f9c8 	bl	8002cc8 <_fflush_r>
 8002938:	b938      	cbnz	r0, 800294a <__swbuf_r+0x74>
 800293a:	4638      	mov	r0, r7
 800293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800293e:	4621      	mov	r1, r4
 8002940:	4628      	mov	r0, r5
 8002942:	f000 f805 	bl	8002950 <__swsetup_r>
 8002946:	2800      	cmp	r0, #0
 8002948:	d0d5      	beq.n	80028f6 <__swbuf_r+0x20>
 800294a:	f04f 37ff 	mov.w	r7, #4294967295
 800294e:	e7f4      	b.n	800293a <__swbuf_r+0x64>

08002950 <__swsetup_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <__swsetup_r+0xac>)
 8002954:	4605      	mov	r5, r0
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	460c      	mov	r4, r1
 800295a:	b118      	cbz	r0, 8002964 <__swsetup_r+0x14>
 800295c:	6a03      	ldr	r3, [r0, #32]
 800295e:	b90b      	cbnz	r3, 8002964 <__swsetup_r+0x14>
 8002960:	f7ff fee4 	bl	800272c <__sinit>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800296a:	0718      	lsls	r0, r3, #28
 800296c:	d422      	bmi.n	80029b4 <__swsetup_r+0x64>
 800296e:	06d9      	lsls	r1, r3, #27
 8002970:	d407      	bmi.n	8002982 <__swsetup_r+0x32>
 8002972:	2309      	movs	r3, #9
 8002974:	602b      	str	r3, [r5, #0]
 8002976:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800297a:	f04f 30ff 	mov.w	r0, #4294967295
 800297e:	81a3      	strh	r3, [r4, #12]
 8002980:	e034      	b.n	80029ec <__swsetup_r+0x9c>
 8002982:	0758      	lsls	r0, r3, #29
 8002984:	d512      	bpl.n	80029ac <__swsetup_r+0x5c>
 8002986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002988:	b141      	cbz	r1, 800299c <__swsetup_r+0x4c>
 800298a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800298e:	4299      	cmp	r1, r3
 8002990:	d002      	beq.n	8002998 <__swsetup_r+0x48>
 8002992:	4628      	mov	r0, r5
 8002994:	f000 f8ce 	bl	8002b34 <_free_r>
 8002998:	2300      	movs	r3, #0
 800299a:	6363      	str	r3, [r4, #52]	; 0x34
 800299c:	89a3      	ldrh	r3, [r4, #12]
 800299e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029a2:	81a3      	strh	r3, [r4, #12]
 80029a4:	2300      	movs	r3, #0
 80029a6:	6063      	str	r3, [r4, #4]
 80029a8:	6923      	ldr	r3, [r4, #16]
 80029aa:	6023      	str	r3, [r4, #0]
 80029ac:	89a3      	ldrh	r3, [r4, #12]
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	81a3      	strh	r3, [r4, #12]
 80029b4:	6923      	ldr	r3, [r4, #16]
 80029b6:	b94b      	cbnz	r3, 80029cc <__swsetup_r+0x7c>
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c2:	d003      	beq.n	80029cc <__swsetup_r+0x7c>
 80029c4:	4621      	mov	r1, r4
 80029c6:	4628      	mov	r0, r5
 80029c8:	f000 f9cb 	bl	8002d62 <__smakebuf_r>
 80029cc:	89a0      	ldrh	r0, [r4, #12]
 80029ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029d2:	f010 0301 	ands.w	r3, r0, #1
 80029d6:	d00a      	beq.n	80029ee <__swsetup_r+0x9e>
 80029d8:	2300      	movs	r3, #0
 80029da:	60a3      	str	r3, [r4, #8]
 80029dc:	6963      	ldr	r3, [r4, #20]
 80029de:	425b      	negs	r3, r3
 80029e0:	61a3      	str	r3, [r4, #24]
 80029e2:	6923      	ldr	r3, [r4, #16]
 80029e4:	b943      	cbnz	r3, 80029f8 <__swsetup_r+0xa8>
 80029e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029ea:	d1c4      	bne.n	8002976 <__swsetup_r+0x26>
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	0781      	lsls	r1, r0, #30
 80029f0:	bf58      	it	pl
 80029f2:	6963      	ldrpl	r3, [r4, #20]
 80029f4:	60a3      	str	r3, [r4, #8]
 80029f6:	e7f4      	b.n	80029e2 <__swsetup_r+0x92>
 80029f8:	2000      	movs	r0, #0
 80029fa:	e7f7      	b.n	80029ec <__swsetup_r+0x9c>
 80029fc:	20000080 	.word	0x20000080

08002a00 <memset>:
 8002a00:	4603      	mov	r3, r0
 8002a02:	4402      	add	r2, r0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memset+0xa>
 8002a08:	4770      	bx	lr
 8002a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0e:	e7f9      	b.n	8002a04 <memset+0x4>

08002a10 <_close_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	2300      	movs	r3, #0
 8002a14:	4d05      	ldr	r5, [pc, #20]	; (8002a2c <_close_r+0x1c>)
 8002a16:	4604      	mov	r4, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	f7fe f9bd 	bl	8000d9a <_close>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_close_r+0x1a>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_close_r+0x1a>
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	20000258 	.word	0x20000258

08002a30 <_lseek_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	4611      	mov	r1, r2
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4d05      	ldr	r5, [pc, #20]	; (8002a50 <_lseek_r+0x20>)
 8002a3c:	602a      	str	r2, [r5, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f7fe f9cf 	bl	8000de2 <_lseek>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_lseek_r+0x1e>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_lseek_r+0x1e>
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	20000258 	.word	0x20000258

08002a54 <_read_r>:
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4604      	mov	r4, r0
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4d05      	ldr	r5, [pc, #20]	; (8002a74 <_read_r+0x20>)
 8002a60:	602a      	str	r2, [r5, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f7fe f960 	bl	8000d28 <_read>
 8002a68:	1c43      	adds	r3, r0, #1
 8002a6a:	d102      	bne.n	8002a72 <_read_r+0x1e>
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	b103      	cbz	r3, 8002a72 <_read_r+0x1e>
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	20000258 	.word	0x20000258

08002a78 <_sbrk_r>:
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	4d05      	ldr	r5, [pc, #20]	; (8002a94 <_sbrk_r+0x1c>)
 8002a7e:	4604      	mov	r4, r0
 8002a80:	4608      	mov	r0, r1
 8002a82:	602b      	str	r3, [r5, #0]
 8002a84:	f7fe f9ba 	bl	8000dfc <_sbrk>
 8002a88:	1c43      	adds	r3, r0, #1
 8002a8a:	d102      	bne.n	8002a92 <_sbrk_r+0x1a>
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	b103      	cbz	r3, 8002a92 <_sbrk_r+0x1a>
 8002a90:	6023      	str	r3, [r4, #0]
 8002a92:	bd38      	pop	{r3, r4, r5, pc}
 8002a94:	20000258 	.word	0x20000258

08002a98 <_write_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4d05      	ldr	r5, [pc, #20]	; (8002ab8 <_write_r+0x20>)
 8002aa4:	602a      	str	r2, [r5, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f7fe f95b 	bl	8000d62 <_write>
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	d102      	bne.n	8002ab6 <_write_r+0x1e>
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	b103      	cbz	r3, 8002ab6 <_write_r+0x1e>
 8002ab4:	6023      	str	r3, [r4, #0]
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	20000258 	.word	0x20000258

08002abc <__errno>:
 8002abc:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <__errno+0x8>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000080 	.word	0x20000080

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	2600      	movs	r6, #0
 8002acc:	4d0c      	ldr	r5, [pc, #48]	; (8002b00 <__libc_init_array+0x38>)
 8002ace:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ad0:	1b64      	subs	r4, r4, r5
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	42a6      	cmp	r6, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	f000 f9a2 	bl	8002e20 <_init>
 8002adc:	2600      	movs	r6, #0
 8002ade:	4d0a      	ldr	r5, [pc, #40]	; (8002b08 <__libc_init_array+0x40>)
 8002ae0:	4c0a      	ldr	r4, [pc, #40]	; (8002b0c <__libc_init_array+0x44>)
 8002ae2:	1b64      	subs	r4, r4, r5
 8002ae4:	10a4      	asrs	r4, r4, #2
 8002ae6:	42a6      	cmp	r6, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af0:	4798      	blx	r3
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afa:	4798      	blx	r3
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08002f78 	.word	0x08002f78
 8002b04:	08002f78 	.word	0x08002f78
 8002b08:	08002f78 	.word	0x08002f78
 8002b0c:	08002f7c 	.word	0x08002f7c

08002b10 <__retarget_lock_init_recursive>:
 8002b10:	4770      	bx	lr

08002b12 <__retarget_lock_acquire_recursive>:
 8002b12:	4770      	bx	lr

08002b14 <__retarget_lock_release_recursive>:
 8002b14:	4770      	bx	lr

08002b16 <memcpy>:
 8002b16:	440a      	add	r2, r1
 8002b18:	4291      	cmp	r1, r2
 8002b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b1e:	d100      	bne.n	8002b22 <memcpy+0xc>
 8002b20:	4770      	bx	lr
 8002b22:	b510      	push	{r4, lr}
 8002b24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b28:	4291      	cmp	r1, r2
 8002b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b2e:	d1f9      	bne.n	8002b24 <memcpy+0xe>
 8002b30:	bd10      	pop	{r4, pc}
	...

08002b34 <_free_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4605      	mov	r5, r0
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d040      	beq.n	8002bbe <_free_r+0x8a>
 8002b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b40:	1f0c      	subs	r4, r1, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfb8      	it	lt
 8002b46:	18e4      	addlt	r4, r4, r3
 8002b48:	f7ff fd58 	bl	80025fc <__malloc_lock>
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <_free_r+0x8c>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	b933      	cbnz	r3, 8002b60 <_free_r+0x2c>
 8002b52:	6063      	str	r3, [r4, #4]
 8002b54:	6014      	str	r4, [r2, #0]
 8002b56:	4628      	mov	r0, r5
 8002b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b5c:	f7ff bd54 	b.w	8002608 <__malloc_unlock>
 8002b60:	42a3      	cmp	r3, r4
 8002b62:	d908      	bls.n	8002b76 <_free_r+0x42>
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	1821      	adds	r1, r4, r0
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	bf01      	itttt	eq
 8002b6c:	6819      	ldreq	r1, [r3, #0]
 8002b6e:	685b      	ldreq	r3, [r3, #4]
 8002b70:	1809      	addeq	r1, r1, r0
 8002b72:	6021      	streq	r1, [r4, #0]
 8002b74:	e7ed      	b.n	8002b52 <_free_r+0x1e>
 8002b76:	461a      	mov	r2, r3
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b10b      	cbz	r3, 8002b80 <_free_r+0x4c>
 8002b7c:	42a3      	cmp	r3, r4
 8002b7e:	d9fa      	bls.n	8002b76 <_free_r+0x42>
 8002b80:	6811      	ldr	r1, [r2, #0]
 8002b82:	1850      	adds	r0, r2, r1
 8002b84:	42a0      	cmp	r0, r4
 8002b86:	d10b      	bne.n	8002ba0 <_free_r+0x6c>
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	4401      	add	r1, r0
 8002b8c:	1850      	adds	r0, r2, r1
 8002b8e:	4283      	cmp	r3, r0
 8002b90:	6011      	str	r1, [r2, #0]
 8002b92:	d1e0      	bne.n	8002b56 <_free_r+0x22>
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4408      	add	r0, r1
 8002b9a:	6010      	str	r0, [r2, #0]
 8002b9c:	6053      	str	r3, [r2, #4]
 8002b9e:	e7da      	b.n	8002b56 <_free_r+0x22>
 8002ba0:	d902      	bls.n	8002ba8 <_free_r+0x74>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	602b      	str	r3, [r5, #0]
 8002ba6:	e7d6      	b.n	8002b56 <_free_r+0x22>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	1821      	adds	r1, r4, r0
 8002bac:	428b      	cmp	r3, r1
 8002bae:	bf01      	itttt	eq
 8002bb0:	6819      	ldreq	r1, [r3, #0]
 8002bb2:	685b      	ldreq	r3, [r3, #4]
 8002bb4:	1809      	addeq	r1, r1, r0
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	6063      	str	r3, [r4, #4]
 8002bba:	6054      	str	r4, [r2, #4]
 8002bbc:	e7cb      	b.n	8002b56 <_free_r+0x22>
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	20000114 	.word	0x20000114

08002bc4 <__sflush_r>:
 8002bc4:	898a      	ldrh	r2, [r1, #12]
 8002bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc8:	4605      	mov	r5, r0
 8002bca:	0710      	lsls	r0, r2, #28
 8002bcc:	460c      	mov	r4, r1
 8002bce:	d457      	bmi.n	8002c80 <__sflush_r+0xbc>
 8002bd0:	684b      	ldr	r3, [r1, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	dc04      	bgt.n	8002be0 <__sflush_r+0x1c>
 8002bd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	dc01      	bgt.n	8002be0 <__sflush_r+0x1c>
 8002bdc:	2000      	movs	r0, #0
 8002bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002be2:	2e00      	cmp	r6, #0
 8002be4:	d0fa      	beq.n	8002bdc <__sflush_r+0x18>
 8002be6:	2300      	movs	r3, #0
 8002be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bec:	682f      	ldr	r7, [r5, #0]
 8002bee:	6a21      	ldr	r1, [r4, #32]
 8002bf0:	602b      	str	r3, [r5, #0]
 8002bf2:	d032      	beq.n	8002c5a <__sflush_r+0x96>
 8002bf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	075a      	lsls	r2, r3, #29
 8002bfa:	d505      	bpl.n	8002c08 <__sflush_r+0x44>
 8002bfc:	6863      	ldr	r3, [r4, #4]
 8002bfe:	1ac0      	subs	r0, r0, r3
 8002c00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c02:	b10b      	cbz	r3, 8002c08 <__sflush_r+0x44>
 8002c04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c06:	1ac0      	subs	r0, r0, r3
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c0e:	4628      	mov	r0, r5
 8002c10:	6a21      	ldr	r1, [r4, #32]
 8002c12:	47b0      	blx	r6
 8002c14:	1c43      	adds	r3, r0, #1
 8002c16:	89a3      	ldrh	r3, [r4, #12]
 8002c18:	d106      	bne.n	8002c28 <__sflush_r+0x64>
 8002c1a:	6829      	ldr	r1, [r5, #0]
 8002c1c:	291d      	cmp	r1, #29
 8002c1e:	d82b      	bhi.n	8002c78 <__sflush_r+0xb4>
 8002c20:	4a28      	ldr	r2, [pc, #160]	; (8002cc4 <__sflush_r+0x100>)
 8002c22:	410a      	asrs	r2, r1
 8002c24:	07d6      	lsls	r6, r2, #31
 8002c26:	d427      	bmi.n	8002c78 <__sflush_r+0xb4>
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6062      	str	r2, [r4, #4]
 8002c2c:	6922      	ldr	r2, [r4, #16]
 8002c2e:	04d9      	lsls	r1, r3, #19
 8002c30:	6022      	str	r2, [r4, #0]
 8002c32:	d504      	bpl.n	8002c3e <__sflush_r+0x7a>
 8002c34:	1c42      	adds	r2, r0, #1
 8002c36:	d101      	bne.n	8002c3c <__sflush_r+0x78>
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	b903      	cbnz	r3, 8002c3e <__sflush_r+0x7a>
 8002c3c:	6560      	str	r0, [r4, #84]	; 0x54
 8002c3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c40:	602f      	str	r7, [r5, #0]
 8002c42:	2900      	cmp	r1, #0
 8002c44:	d0ca      	beq.n	8002bdc <__sflush_r+0x18>
 8002c46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c4a:	4299      	cmp	r1, r3
 8002c4c:	d002      	beq.n	8002c54 <__sflush_r+0x90>
 8002c4e:	4628      	mov	r0, r5
 8002c50:	f7ff ff70 	bl	8002b34 <_free_r>
 8002c54:	2000      	movs	r0, #0
 8002c56:	6360      	str	r0, [r4, #52]	; 0x34
 8002c58:	e7c1      	b.n	8002bde <__sflush_r+0x1a>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	47b0      	blx	r6
 8002c60:	1c41      	adds	r1, r0, #1
 8002c62:	d1c8      	bne.n	8002bf6 <__sflush_r+0x32>
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0c5      	beq.n	8002bf6 <__sflush_r+0x32>
 8002c6a:	2b1d      	cmp	r3, #29
 8002c6c:	d001      	beq.n	8002c72 <__sflush_r+0xae>
 8002c6e:	2b16      	cmp	r3, #22
 8002c70:	d101      	bne.n	8002c76 <__sflush_r+0xb2>
 8002c72:	602f      	str	r7, [r5, #0]
 8002c74:	e7b2      	b.n	8002bdc <__sflush_r+0x18>
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c7c:	81a3      	strh	r3, [r4, #12]
 8002c7e:	e7ae      	b.n	8002bde <__sflush_r+0x1a>
 8002c80:	690f      	ldr	r7, [r1, #16]
 8002c82:	2f00      	cmp	r7, #0
 8002c84:	d0aa      	beq.n	8002bdc <__sflush_r+0x18>
 8002c86:	0793      	lsls	r3, r2, #30
 8002c88:	bf18      	it	ne
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	680e      	ldr	r6, [r1, #0]
 8002c8e:	bf08      	it	eq
 8002c90:	694b      	ldreq	r3, [r1, #20]
 8002c92:	1bf6      	subs	r6, r6, r7
 8002c94:	600f      	str	r7, [r1, #0]
 8002c96:	608b      	str	r3, [r1, #8]
 8002c98:	2e00      	cmp	r6, #0
 8002c9a:	dd9f      	ble.n	8002bdc <__sflush_r+0x18>
 8002c9c:	4633      	mov	r3, r6
 8002c9e:	463a      	mov	r2, r7
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	6a21      	ldr	r1, [r4, #32]
 8002ca4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002ca8:	47e0      	blx	ip
 8002caa:	2800      	cmp	r0, #0
 8002cac:	dc06      	bgt.n	8002cbc <__sflush_r+0xf8>
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb8:	81a3      	strh	r3, [r4, #12]
 8002cba:	e790      	b.n	8002bde <__sflush_r+0x1a>
 8002cbc:	4407      	add	r7, r0
 8002cbe:	1a36      	subs	r6, r6, r0
 8002cc0:	e7ea      	b.n	8002c98 <__sflush_r+0xd4>
 8002cc2:	bf00      	nop
 8002cc4:	dfbffffe 	.word	0xdfbffffe

08002cc8 <_fflush_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	690b      	ldr	r3, [r1, #16]
 8002ccc:	4605      	mov	r5, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	b913      	cbnz	r3, 8002cd8 <_fflush_r+0x10>
 8002cd2:	2500      	movs	r5, #0
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	b118      	cbz	r0, 8002ce2 <_fflush_r+0x1a>
 8002cda:	6a03      	ldr	r3, [r0, #32]
 8002cdc:	b90b      	cbnz	r3, 8002ce2 <_fflush_r+0x1a>
 8002cde:	f7ff fd25 	bl	800272c <__sinit>
 8002ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f3      	beq.n	8002cd2 <_fflush_r+0xa>
 8002cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002cec:	07d0      	lsls	r0, r2, #31
 8002cee:	d404      	bmi.n	8002cfa <_fflush_r+0x32>
 8002cf0:	0599      	lsls	r1, r3, #22
 8002cf2:	d402      	bmi.n	8002cfa <_fflush_r+0x32>
 8002cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cf6:	f7ff ff0c 	bl	8002b12 <__retarget_lock_acquire_recursive>
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	f7ff ff61 	bl	8002bc4 <__sflush_r>
 8002d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d04:	4605      	mov	r5, r0
 8002d06:	07da      	lsls	r2, r3, #31
 8002d08:	d4e4      	bmi.n	8002cd4 <_fflush_r+0xc>
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	059b      	lsls	r3, r3, #22
 8002d0e:	d4e1      	bmi.n	8002cd4 <_fflush_r+0xc>
 8002d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d12:	f7ff feff 	bl	8002b14 <__retarget_lock_release_recursive>
 8002d16:	e7dd      	b.n	8002cd4 <_fflush_r+0xc>

08002d18 <__swhatbuf_r>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d20:	4615      	mov	r5, r2
 8002d22:	2900      	cmp	r1, #0
 8002d24:	461e      	mov	r6, r3
 8002d26:	b096      	sub	sp, #88	; 0x58
 8002d28:	da0c      	bge.n	8002d44 <__swhatbuf_r+0x2c>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d32:	bf0c      	ite	eq
 8002d34:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002d38:	2340      	movne	r3, #64	; 0x40
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	6031      	str	r1, [r6, #0]
 8002d3e:	602b      	str	r3, [r5, #0]
 8002d40:	b016      	add	sp, #88	; 0x58
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	466a      	mov	r2, sp
 8002d46:	f000 f849 	bl	8002ddc <_fstat_r>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	dbed      	blt.n	8002d2a <__swhatbuf_r+0x12>
 8002d4e:	9901      	ldr	r1, [sp, #4]
 8002d50:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002d54:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002d58:	4259      	negs	r1, r3
 8002d5a:	4159      	adcs	r1, r3
 8002d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d60:	e7eb      	b.n	8002d3a <__swhatbuf_r+0x22>

08002d62 <__smakebuf_r>:
 8002d62:	898b      	ldrh	r3, [r1, #12]
 8002d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d66:	079d      	lsls	r5, r3, #30
 8002d68:	4606      	mov	r6, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	d507      	bpl.n	8002d7e <__smakebuf_r+0x1c>
 8002d6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d72:	6023      	str	r3, [r4, #0]
 8002d74:	6123      	str	r3, [r4, #16]
 8002d76:	2301      	movs	r3, #1
 8002d78:	6163      	str	r3, [r4, #20]
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
 8002d7e:	466a      	mov	r2, sp
 8002d80:	ab01      	add	r3, sp, #4
 8002d82:	f7ff ffc9 	bl	8002d18 <__swhatbuf_r>
 8002d86:	9900      	ldr	r1, [sp, #0]
 8002d88:	4605      	mov	r5, r0
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	f7ff fbb6 	bl	80024fc <_malloc_r>
 8002d90:	b948      	cbnz	r0, 8002da6 <__smakebuf_r+0x44>
 8002d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d96:	059a      	lsls	r2, r3, #22
 8002d98:	d4ef      	bmi.n	8002d7a <__smakebuf_r+0x18>
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	81a3      	strh	r3, [r4, #12]
 8002da4:	e7e3      	b.n	8002d6e <__smakebuf_r+0xc>
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	6020      	str	r0, [r4, #0]
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	81a3      	strh	r3, [r4, #12]
 8002db0:	9b00      	ldr	r3, [sp, #0]
 8002db2:	6120      	str	r0, [r4, #16]
 8002db4:	6163      	str	r3, [r4, #20]
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	b15b      	cbz	r3, 8002dd2 <__smakebuf_r+0x70>
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc0:	f000 f81e 	bl	8002e00 <_isatty_r>
 8002dc4:	b128      	cbz	r0, 8002dd2 <__smakebuf_r+0x70>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	81a3      	strh	r3, [r4, #12]
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	431d      	orrs	r5, r3
 8002dd6:	81a5      	strh	r5, [r4, #12]
 8002dd8:	e7cf      	b.n	8002d7a <__smakebuf_r+0x18>
	...

08002ddc <_fstat_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	2300      	movs	r3, #0
 8002de0:	4d06      	ldr	r5, [pc, #24]	; (8002dfc <_fstat_r+0x20>)
 8002de2:	4604      	mov	r4, r0
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	602b      	str	r3, [r5, #0]
 8002dea:	f7fd ffe1 	bl	8000db0 <_fstat>
 8002dee:	1c43      	adds	r3, r0, #1
 8002df0:	d102      	bne.n	8002df8 <_fstat_r+0x1c>
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	b103      	cbz	r3, 8002df8 <_fstat_r+0x1c>
 8002df6:	6023      	str	r3, [r4, #0]
 8002df8:	bd38      	pop	{r3, r4, r5, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000258 	.word	0x20000258

08002e00 <_isatty_r>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	2300      	movs	r3, #0
 8002e04:	4d05      	ldr	r5, [pc, #20]	; (8002e1c <_isatty_r+0x1c>)
 8002e06:	4604      	mov	r4, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	602b      	str	r3, [r5, #0]
 8002e0c:	f7fd ffdf 	bl	8000dce <_isatty>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d102      	bne.n	8002e1a <_isatty_r+0x1a>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	b103      	cbz	r3, 8002e1a <_isatty_r+0x1a>
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	20000258 	.word	0x20000258

08002e20 <_init>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	bf00      	nop
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr

08002e2c <_fini>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	bf00      	nop
 8002e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e32:	bc08      	pop	{r3}
 8002e34:	469e      	mov	lr, r3
 8002e36:	4770      	bx	lr
